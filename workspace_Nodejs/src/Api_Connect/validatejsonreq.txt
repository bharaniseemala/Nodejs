function validateReq(req)
{
  if(req)
    {
      var prop = ['name','parentCategory','description'] //Add more property name here
      var found = false;
      for(var key in req.body)
      {
        if (prop[key] && (prop[key] !== null))
        {
          found = true;
        }
        else
        {
          return false;

        }
      }
    }
  else
    
    {
      return false;
    }
  }

exports.createCategory = function (request, response) {

  var valid = validateReq(request);
  alert(valid);
  if(valid){
    var newCategory = {
        "name": request.body.categoryName,
        "parentCategory": request.body.parentCategory,
        "description": request.body.description,
        "slug": request.body.slug,
        "imageUrl": request.body.categoryImage,
        "updated": new Date()
    }

    var category = new Category(newCategory);

    category.save()
        .then(function (category) {
            sendResponse(response, 201, "success", category);
        })
        .catch(function (error) {
            sendResponse(response, 400, "error", error);
        });
    }
  else
    {
      //Error handling code
      }
};

-----------------------------------------------------

var http = require('http')
var url = require('url')
var fs = require('fs')
var path = require('path')
var baseDirectory = __dirname   // or whatever base directory you want

var port = 9615

http.createServer(function (request, response) {
    try {
        var requestUrl = url.parse(request.url)

        // need to use path.normalize so people can't access directories underneath baseDirectory
        var fsPath = baseDirectory+path.normalize(requestUrl.pathname)

        var fileStream = fs.createReadStream(fsPath)
        fileStream.pipe(response)
        fileStream.on('open', function() {
             response.writeHead(200)
        })
        fileStream.on('error',function(e) {
             response.writeHead(404)     // assume the file doesn't exist
             response.end()
        })
   } catch(e) {
        response.writeHead(500)
        response.end()     // end the response so browsers don't hang
        console.log(e.stack)
   }
}).listen(port)

console.log("listening on port "+port)