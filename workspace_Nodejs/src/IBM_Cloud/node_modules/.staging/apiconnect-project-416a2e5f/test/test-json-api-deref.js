/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-project

'use strict';

var _ = require('lodash');
var loader = require('..');
var path = require('path');
var test = require('tap').test;
var deref = require('../lib/json-api-deref');

var artifact;

test('setup', function(t) {
  var product = path.join(__dirname, 'fixtures/lbapp-refs/definitions/my-api.yaml');
  return loader.loadProject(product)
    .then(function(res) {
      t.ok(res);
      t.equals(res.length, 1);
      artifact = res[0];
      return;
    });
});

test('basic test - nested refs', function(t) {
  var localArtifact = _.cloneDeep(artifact);
  return deref(localArtifact)
    .then(function(res) {
      t.ok(res);
      var desc = res[0].refs[0].data.info.description;
      t.equals(desc, 'description-fragment');
    });
});

test('basic test - root $ref', function(t) {
  t.comment('Ensure that $ref located at the top level of an API is not expanded.');
  return loader.loadProject(path.resolve(__dirname, 'fixtures/api-root-ref.yaml'))
    .then(deref)
    .then(function(res) {
      t.ok(res);
      t.ok(res[0].data.$ref);
      t.equals(res[0].data.$ref, './schemes.yaml');
    });
});

test('negative - missing ref', function(t) {
  var localArtifact = _.cloneDeep(artifact);
  localArtifact.refs[0].data.info.description = { $ref: 'invalid-path.YAML' };
  return deref(localArtifact)
    .then(function(res) {
      t.ok(res);
      var swagger = res[0].refs[0];
      t.ok(swagger);
      t.ok(swagger.err);
      t.ok(_.includes(swagger.err.message, 'ENOENT'));
    });
});

test('basic circular refs', function(t) {
  var localArtifact = _.cloneDeep(artifact);
  localArtifact.refs[0].data.info.description = { $ref: './nested/description-fragment-folder-nested.yaml' };
  return deref(localArtifact)
    .then(function(res) {
      t.ok(res);
      var swagger = res[0].refs[0];
      t.ok(swagger);
      t.notOk(swagger.err);
      t.equal(swagger.data.info.description.info['x-ibm-name'], 'my-api');
    });
});

test('basic ref to ref to invalid -- negative', function(t) {
  var localArtifact = _.cloneDeep(artifact);
  localArtifact.refs[0].data.info.description = { $ref: './description-fragment-nested-invalid.yaml' };
  return deref(localArtifact)
    .then(function(res) {
      t.ok(res);
      var swagger = res[0].refs[0];
      t.ok(swagger);
      t.ok(swagger.err);
      t.ok(_.includes(swagger.err.message, 'ENOENT'));
    });
});

test('basic ref to non-yaml -- negative', function(t) {
  var localArtifact = _.cloneDeep(artifact);
  localArtifact.refs[0].data.info.description = { $ref: './fragment-not-yaml.yaml' };
  return deref(localArtifact)
    .then(function(res) {
      t.ok(res);
      var swagger = res[0].refs[0];
      t.ok(swagger);
      t.ok(swagger.err);
      t.ok(_.includes(swagger.err.message, 'incomplete explicit mapping pair'));
    });
});

test('basic version and name ref expansion', function(t) {
  var file = path.join(__dirname, 'fixtures/refs/api.yaml');
  return loader.loadProject(file, { resolveExternalApiRefs: true })
    .then(function(res) {
      t.ok(res);
      t.equals(res.length, 1);
      t.equals(res[0].data.info.version, '1.0.0');
      t.equals(res[0].version, '1.0.0');

      t.equals(res[0].name, 'my-api');
    });
});

test('basic version and name ref expansion', function(t) {
  var file = path.join(__dirname, 'fixtures/refs/product.yaml');
  return loader.loadProject(file, { resolveExternalApiRefs: true })
    .then(function(res) {
      t.ok(res);
      t.equals(res.length, 1);
      var api = res[0].refs[0];

      t.equals(api.data.info.version, '1.0.0');
      t.equals(api.version, '1.0.0');
      t.equals(api.name, 'my-api');
    });
});

