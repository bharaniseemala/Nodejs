/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-project
'use strict';

var loader = require('..');
var path = require('path');
var test = require('tap').test;

test('inspectPath recognizes loopback project', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'lbapp')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'lbapp')),
    name: 'lbapp',
    projectType: 'loopback',
    type: 'project',
    version: '1.0.0',
  });
  t.end();
});

test('inspectPath recognizes dir deeper in loopback project', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'lbapp', 'dir1', 'dir2')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'lbapp')),
    name: 'lbapp',
    projectType: 'loopback',
    type: 'project',
    version: '1.0.0',
  });
  t.end();
});

test('inspectPath recognizes swiftserver project', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'swiftserverapp')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'swiftserverapp')),
    name: 'swiftserverapp',
    projectType: 'swiftserver',
    type: 'project',
  });
  t.end();
});

test('inspectPath recognizes legacy swiftserver project', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'swiftserver-legacy')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'swiftserver-legacy')),
    name: 'swiftserverapp-legacy',
    projectType: 'swiftserver',
    type: 'project',
  });
  t.end();
});

test('inspectPath recognizes dir deeper in swiftserver project', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'swiftserverapp', 'dir1', 'dir2')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'swiftserverapp')),
    name: 'swiftserverapp',
    projectType: 'swiftserver',
    type: 'project',
  });
  t.end();
});

test('inspectPath recognizes dir deeper in swiftserver project', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'swiftserver-legacy', 'dir1', 'dir2')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'swiftserver-legacy')),
    name: 'swiftserverapp-legacy',
    projectType: 'swiftserver',
    type: 'project',
  });
  t.end();
});


test('inspectPath recognizes micro gateway as non-loopback project', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'fake-gw')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'fake-gw')),
    projectType: 'unknown',
    type: 'directory',
    name: 'fake-gw',
  });
  t.end();
});

test('inspectPath recognizes dir with artifacts', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'dir')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'dir')),
    projectType: 'unknown',
    type: 'directory',
    name: 'dir',
  });
  t.end();
});

test('inspectPath recognizes node project', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'nodeapp')), { incNodeProjects: true });
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'nodeapp')),
    projectType: 'node',
    type: 'project',
    name: 'nodeapp',
    version: '1.0.0',
  });
  t.end();
});

test('inspectPath recognizes artifact file', function(t) {
  var info = loader.inspectPath(path.resolve(__dirname, path.join('fixtures', 'dir', 'my-api.yaml')));
  t.deepEqual(info, {
    basePath: path.resolve(__dirname, path.join('fixtures', 'dir', 'my-api.yaml')),
    type: 'file',
    name: 'my-api.yaml',
  });
  t.end();
});
