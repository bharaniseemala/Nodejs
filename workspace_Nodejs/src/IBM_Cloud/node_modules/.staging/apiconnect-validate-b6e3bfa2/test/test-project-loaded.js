'use strict';

var _ = require('lodash');
var path = require('path');
var project = require('apiconnect-project');
var test = require('tap').test;
var validate = require('../index');

test('test validate lb application', function(t) {
    var product = path.resolve(__dirname, 'fixtures', 'lb1', 'lb1-product.yaml');
    var api = path.resolve(__dirname, 'fixtures', 'lb1', 'lb1.yaml');
    return project.loadProject(path.resolve(__dirname, 'fixtures', 'lb1'))
        .then(validate.validateArtifact)
        .then(function(res) {
            product = res[product];
            api = res[api];

            // ensure that the correct number of schema validations happen
            // 4 validations here because product refers to api and we validate both.
            t.equals(product.validation.length, 4);
            t.equals(product.error.length, 0);

            t.equals(api.validation.length, 3);
            t.equals(api.error.length, 0);
        });
});

test('test validate lb application - validate api refs', function(t) {
    var product = path.resolve(__dirname, 'fixtures', 'lb1', 'lb1-product.yaml');
    return project.loadProject(product)
        .then(validate.validateArtifact)
        .then(function(res) {
            t.equals(Object.keys(res).length, 1);
            res = res[product];
            // ensure that the correct number of schema validations happen
            t.equals(res.validation.length, 4);
        });
});

test('test validate lb application - product only', function(t) {
    var product = path.resolve(__dirname, 'fixtures', 'lb1', 'lb1-product.yaml');
    return project.loadProject(product)
        .then(_.curryRight(validate.validateArtifact)({ productOnly: true }))
        .then(function(res) {
            t.equals(Object.keys(res).length, 1);
            res = res[product];
            // ensure that the correct number of schema validations happen
            t.equals(res.validation.length, 1);
        });
});

test('test validate lb api', function(t) {
    var api = path.resolve(__dirname, 'fixtures', 'lb1', 'lb1.yaml');
    return project.loadProject(api)
        .then(validate.validateArtifact)
        .then(function(res) {
            t.equals(Object.keys(res).length, 1);
            res = res[api];
            // ensure that the correct number of schema validations happen
            t.equals(res.validation.length, 3);
        });
});

test('test validate lb api - no extensions', function(t) {
    var api = path.resolve(__dirname, 'fixtures', 'lb1', 'lb1.yaml');
    return project.loadProject(api)
        .then(_.curryRight(validate.validateArtifact)({ extensions: false }))
        .then(function(res) {
            t.equals(Object.keys(res).length, 1);
            res = res[api];
            // ensure that the correct number of schema validations happen
            t.equals(res.validation.length, 2);
        });
});

test('test (negative) validate file with tabs', function(t) {
    var file = path.resolve(__dirname, 'fixtures', 'negative-files', 'tab-indent.yaml');
    return project.loadProject(file)
        .then(validate.validateArtifact)
        .then(function(res) {
            res = res[file];
            t.equals(res.error.length, 1);
            t.equals(res.error[0].type, 'tabs-indentation');
        });
});

test('test (negative) validate invalid yaml', function(t) {
    var file = path.resolve(__dirname, 'fixtures', 'negative-files', 'product-syntax-error.yaml');
    return project.loadProject(file)
        .then(validate.validateArtifact)
        .then(function(res) {
            res = res[file];
            t.equals(res.error.length, 1);
            t.equals(res.error[0].name, 'YAMLException');
        });
});

test('test (negative) validate empty file', function(t) {
    var file = path.resolve(__dirname, 'fixtures', 'empty.yaml');
    return project.loadProject(file)
        .then(validate.validateArtifact)
        .then(function(res) {
            res = res[file];
            t.equals(res.error.length, 1);
            t.equals(res.error[0].message, 'Encountered an empty file empty.yaml.');
        });
});

test('test (negative) product to product', function(t) {
    var file = path.resolve(__dirname, 'fixtures/negative-files', 'product-to-product.yaml');
    return project.loadProject(file)
        .then(validate.validateArtifact)
        .then(function(res) {
            res = res[file];
            t.equals(res.error.length, 1);
            var message = 'Product product-to-product.yaml incorrectly references another product ' +
                'product-to-product.yaml as an API.';
            t.equals(res.error[0].message, message);
        });
});

test('test product to api', function(t) {
    var product = path.resolve(__dirname, 'fixtures', 'lb1', 'lb1-product.yaml');
    return project.loadProject(product)
        .then(validate.validateArtifact)
        .then(function(res) {
            res = res[product];
            t.equals(res.error.length, 0);
            // Make sure our ref is populated
            t.equals(res.artifact.refs.length, 1);
        });
});

test('test (negative) product to non-existent api', function(t) {
    var product = path.resolve(__dirname, 'fixtures', 'negative-files', 'product-non-existant-api.yaml');
    return project.loadProject(product)
        .then(validate.validateArtifact)
        .then(function(res) {
            res = res[product];
            t.equals(res.error.length, 1);
            t.equals(res.error[0].type, 'missing-api');
            // Make sure our ref is populated
            t.equals(res.artifact.refs.length, 1);
            // One valid schema validation
            t.equals(res.validation.length, 1);
            t.equals(res.validation[0].status, 'valid');
        });
});

test('test product -productOnly to non-existent api', function(t) {
    t.comment('Validate a product that references a non-existant api, but pass productOnly flag');
    var product = path.resolve(__dirname, 'fixtures', 'negative-files', 'product-non-existant-api.yaml');
    return project.loadProject(product)
        .then(_.curryRight(validate.validateArtifact)({ productOnly: true }))
        .then(function(res) {
            res = res[product];
            t.equals(res.error.length, 0);
            // Make sure our ref is populated
            t.equals(res.artifact.refs.length, 1);
            // One valid schema validation
            t.equals(res.validation.length, 1);
            t.equals(res.validation[0].status, 'valid');
        });
});
