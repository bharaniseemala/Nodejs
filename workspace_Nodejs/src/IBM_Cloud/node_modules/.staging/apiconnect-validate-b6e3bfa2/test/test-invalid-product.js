'use strict';

var _ = require('lodash');
var fs = require('fs');
var jsyaml = require('js-yaml');
var path = require('path');
var test = require('tap').test;
var validate = require('../index');

test('test invalid product rate-limits', function(t) {
    var def = path.resolve(__dirname, 'fixtures', 'invalid-product-limits.yaml');
    var data = jsyaml.safeLoad(fs.readFileSync(def));

    return validate.validateObject(data)
        .then(function(res) {
            t.equals(res.length, 1);
            t.equals(res[0].error.length, 2);
            console.log(res[0].error[0].message);
            // This is stupid, but lodash doesn't like finding the pattern string for some reason.
            var unknownErrIdx = _.findIndex(res[0].error, { message: 'Additional properties not allowed' });
            t.ok(unknownErrIdx !== -1, 'Additional properties' + unknownErrIdx);
            var patternIdx = unknownErrIdx === 0 ? 1 : 0;
            t.equals(res[0].error[patternIdx].message,
                'String does not match pattern: ^((\\d+)\\/(\\d+)?(second|minute|hour|day|week)|unlimited)$');

            delete data.plans.default['rate-limits']['per-minute-limit'].hardlimit;
            data.plans.default['rate-limits']['per-minute-limit']['hard-limit'] = true;
            return validate.validateObject(data);
        }).then(function(res) {
            console.log(res[0].error[0].message);
            t.equals(res.length, 1);
            t.equals(res[0].error.length, 1);
            t.equals(res[0].error[0].message,
                'String does not match pattern: ^((\\d+)\\/(\\d+)?(second|minute|hour|day|week)|unlimited)$');
            // change 120/min -> 120/minute
            data.plans.default['rate-limits']['per-minute-limit'].value = '120/minute';

            return validate.validateObject(data);
        }).then(function(res) {
            t.equals(res.length, 1);
            t.equals(res[0].error.length, 0);
            t.equals(res[0].status, 'valid');

            return;
        });
});


[
    [ 'provider', 'foo', 'No enum match for: "foo"' ],
    [ 'model', 'foo', 'No enum match for: "foo"' ],
    [ 'amount', 20.50, 'Invalid type: number (expected integer)' ],
    [ 'amount', 999999999, 'Value 999999999 is greater than maximum 99999999' ],
    [ 'amount', -100, 'Value -100 is less than minimum 0' ],
    [ 'currency', 'foo', 'No enum match for: "foo"' ],
    [ 'trial-period-days', 20.50, 'Invalid type: number (expected integer)' ],
    [ 'trial-period-days', -100, 'Value -100 is less than minimum 0' ],
    [ 'trial-period-days', 1000, 'Value 1000 is greater than maximum 730' ]
].forEach(function(invalid_case) {
    test('test invalid product billing-model:' + invalid_case[0] + ':' + invalid_case[1], function(t) {
        var def = path.resolve(__dirname, 'fixtures', 'lb1', 'lb1-product.yaml');
        var valid_data = jsyaml.safeLoad(fs.readFileSync(def));

        var data = _.cloneDeep(valid_data);
        data.plans.default['billing-model'][invalid_case[0]] = invalid_case[1];
        return validate.validateObject(data)
            .then(function(res) {
                t.equals(res.length, 1);
                t.equals(res[0].error.length, 1);
                t.equals(res[0].error[0].subErrors.length, 1);
                t.equals(res[0].error[0].message, 'Data does not match any schemas from "oneOf"');
                t.equals(res[0].error[0].subErrors[0].message, invalid_case[2]);
                t.ok(true);
                return;
            });
    });
});
