'use strict';

// Licensed Materials - Property of IBM
// 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
//
// (C) Copyright IBM Corporation 2016, 2017
//
// All Rights Reserved.
// US Government Users Restricted Rights - Use, duplication or disclosure
// restricted by GSA ADP Schedule Contract with IBM Corp.

var _ = require('lodash');
var path = require('path');
var test = require('tap').test;

var validate = require('../index');

test('test valid api', function(t) {
    var file = path.resolve(__dirname, 'fixtures/lb1', 'lb1.yaml');
    return validate.validateFile(file)
        .then(function(res) {
            t.equals(res.length, 3);
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'Swagger Version 2.0 schema' }));
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'API Connect swagger extensions schema' }));
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'IBM Swagger Version 2.0 schema' }));
        });
});

test('test valid api, no extensions', function(t) {
    var file = path.resolve(__dirname, 'fixtures/lb1', 'lb1.yaml');
    var validateExtensions = false;
    return validate.validateFile(file, validateExtensions)
        .then(function(res) {
            t.equals(res.length, 2);
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'Swagger Version 2.0 schema' }));
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'IBM Swagger Version 2.0 schema' }));
        });
});

test('test invalid api', function(t) {
    var file = path.resolve(__dirname, 'fixtures/negative-files', 'lb1-invalid-name.yaml');
    return validate.validateFile(file)
        .then(function(res) {
            t.equals(res.length, 3);
            var invalid = _.find(res, { status: 'not_valid', type: 'api', title: 'Swagger Version 2.0 schema' });
            t.ok(invalid);
            t.equals(invalid.error.length, 1);
            t.equals(invalid.error[0].message, 'x-ibm-name must conform to the regex ^[A-Za-z0-9_-]+$');
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'API Connect swagger extensions schema' }));
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'IBM Swagger Version 2.0 schema' }));
        });
});

test('test invalid number', function(t) {
    var file = path.resolve(__dirname, 'fixtures/negative-files', 'lb1-invalid-name-number.yaml');
    return validate.validateFile(file)
        .then(function(res) {
            t.equals(res.length, 3);
            var invalid = _.find(res, { status: 'not_valid', type: 'api', title: 'Swagger Version 2.0 schema' });
            t.ok(invalid);
            t.equals(invalid.error.length, 1);
            t.equals(invalid.error[0].message, 'x-ibm-name must be a string and conform to the regex ^[A-Za-z0-9_-]+$');
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'API Connect swagger extensions schema' }));
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'IBM Swagger Version 2.0 schema' }));
        });
});

test('test empty name', function(t) {
    var file = path.resolve(__dirname, 'fixtures/negative-files', 'lb1-invalid-name-empty.yaml');
    return validate.validateFile(file)
        .then(function(res) {
            t.equals(res.length, 3);
            var invalid = _.find(res, { status: 'not_valid', type: 'api', title: 'Swagger Version 2.0 schema' });
            t.ok(invalid);
            t.equals(invalid.error.length, 1);
            t.equals(invalid.error[0].message, 'x-ibm-name cannot be empty.');
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'API Connect swagger extensions schema' }));
            t.ok(_.find(res, { status: 'valid', type: 'api', title: 'IBM Swagger Version 2.0 schema' }));
        });
});

test('test valid product', function(t) {
    var file = path.resolve(__dirname, 'fixtures/lb1', 'lb1-product.yaml');
    return validate.validateFile(file)
        .then(function(res) {
            t.equals(res.length, 1);
            t.ok(_.find(res, { status: 'valid', type: 'product', title: 'API Connect product schema' }));
        });
});

test('test valid product, no extensions', function(t) {
    var file = path.resolve(__dirname, 'fixtures/lb1', 'lb1-product.yaml');
    return validate.validateFile(file, false)
        .then(function(res) {
            t.equals(res.length, 1);
            t.ok(_.find(res, { status: 'valid', type: 'product', title: 'API Connect product schema' }));
        });
});

test('test valid product, with extensions', function(t) {
    var file = path.resolve(__dirname, 'fixtures/lb1', 'lb1-product-x.yaml');
    return validate.validateFile(file, false)
        .then(function(res) {
            t.equals(res.length, 1);
            t.ok(_.find(res, { status: 'valid', type: 'product', title: 'API Connect product schema' }));
        });
});


test('test valid product, with x-ibm-languages extensions', function(t) {
    var file = path.resolve(__dirname, 'fixtures/vendor-extensions', 'climbing-weather-product-x-ibm-languages.yaml');
    return validate.validateFile(file, false)
        .then(function(res) {
            t.equals(res.length, 1);
            t.ok(_.find(res, { status: 'valid', type: 'product', title: 'API Connect product schema' }));
        });
});
