/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-auth
'use strict';

var AuthAgent = require('../lib/auth-agent');
var Netrc = require('../lib/netrc');
var Promise = require('bluebird');
var _ = require('lodash');
var config = require('apiconnect-config');
var f = require('util').format;
var test = require('tap').test;

var testServer = 'this-is-not-a-serverapim.com';
var conf = config.loadConfig();
conf.set({
  app: f('apic-app://%s/orgs/climbon/apps/lbapp', testServer),
});
var options = { apicConfig: conf };
var creds = {
  login: 'mockuser',
  username: 'mockuser',
  password: 'mockpassword',
  host: testServer,
};
function mockLogin() {
  Netrc.setCredential(creds.host, creds.username, creds.password);
  return Promise.resolve();
}
function mockLogout() {
  Netrc.deleteCredential(creds.host);
  return Promise.resolve();
}

test('setup', function(t) {
  return mockLogout();
});

test('test auth agent optionalLogin - not logged in', function(t) {
  var cmd = { loginOptional: 'app' };
  var aa = new AuthAgent(cmd, options);
  return aa.checkLogin()
    .then(function(res) {
      // Not logged in, but optional so we should only get hostname
      t.same(res, { host: testServer });
    });
});

test('test auth agent optionalLogin - not logged in - server', function(t) {
  var cmd = { loginOptional: 'app' };
  var aa = new AuthAgent(cmd, _.defaults({ server: testServer }, options));
  return aa.checkLogin()
    .then(function(res) {
      // Not logged in, but optional so we should only get hostname
      t.same(res, { host: testServer });
    });
});

test('test auth agent requiredLogin - not logged in', function(t) {
  var cmd = { loginRequired: 'app' };
  var aa = new AuthAgent(cmd, options);
  return aa.checkLogin()
    .then(t.fail)
    .catch(function(err) {
      t.equals(err.message, 'Login to this-is-not-a-serverapim.com is required with \'apic login\'.');
    });
});

test('test auth agent optionalLogin - logged in', function(t) {
  var cmd = { loginOptional: 'app' };
  var aa = new AuthAgent(cmd, options);
  return mockLogin()
    .then(aa.checkLogin.bind(aa))
    .then(function(res) {
      // Not logged in, but optional so we shouldn't get anything
      t.same(res, creds);
    });
});

test('test auth agent requiredLogin - logged in', function(t) {
  var cmd = { loginRequired: 'app' };
  var aa = new AuthAgent(cmd, options);
  return mockLogin()
    .then(aa.checkLogin.bind(aa))
    .then(function(res) {
      // Not logged in, but optional so we shouldn't get anything
      t.same(res, creds);
    });
});

test('teardown', function(t) {
  return mockLogout();
});

