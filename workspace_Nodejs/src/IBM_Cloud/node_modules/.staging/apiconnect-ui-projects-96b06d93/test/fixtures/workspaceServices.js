/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "apim.loopback";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/workspace/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name apim.loopback
 * @module
 * @description
 *
 * The `apim.loopback` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("apim.loopback", ['ngResource']);

/**
 * @ngdoc object
 * @name apim.loopback.Workspace
 * @header apim.loopback.Workspace
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Workspace` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Workspace",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Workspaces/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#getAvailableTemplates
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `templates` – `{*=}` -
             */
            "getAvailableTemplates": {
              url: urlBase + "/Workspaces/component-templates",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#addComponent
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "addComponent": {
              url: urlBase + "/Workspaces/component",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#createFromTemplate
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `templateName` – `{string=}` -
             *
             *  - `name` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "createFromTemplate": {
              url: urlBase + "/Workspaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#listAvailableConnectors
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Workspace` object.)
             * </em>
             */
            "listAvailableConnectors": {
              isArray: true,
              url: urlBase + "/Workspaces/connectors",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#start
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Workspace` object.)
             * </em>
             */
            "start": {
              url: urlBase + "/Workspaces/start",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#stop
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Workspace` object.)
             * </em>
             */
            "stop": {
              url: urlBase + "/Workspaces/stop",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#restart
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Workspace` object.)
             * </em>
             */
            "restart": {
              url: urlBase + "/Workspaces/restart",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#isRunning
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Workspace` object.)
             * </em>
             */
            "isRunning": {
              url: urlBase + "/Workspaces/is-running",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#getWorkspace
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `path` – `{string=}` -
             */
            "getWorkspace": {
              url: urlBase + "/Workspaces/get-workspace",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Workspace#loadWorkspace
             * @methodOf apim.loopback.Workspace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `path` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Workspace` object.)
             * </em>
             */
            "loadWorkspace": {
              url: urlBase + "/Workspaces/load-workspace",
              method: "POST",
            },
          }
        );




        /**
        * @ngdoc property
        * @name apim.loopback.Workspace#modelName
        * @propertyOf apim.loopback.Workspace
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Workspace`.
        */
        R.modelName = "Workspace";



        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.PackageDefinition
 * @header apim.loopback.PackageDefinition
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PackageDefinition` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PackageDefinition",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/PackageDefinitions/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#create
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/PackageDefinitions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#createMany
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/PackageDefinitions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#upsert
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/PackageDefinitions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#replaceOrCreate
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/PackageDefinitions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#upsertWithWhere
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/PackageDefinitions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#exists
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/PackageDefinitions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#findById
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/PackageDefinitions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#replaceById
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/PackageDefinitions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#find
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/PackageDefinitions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#findOne
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/PackageDefinitions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#updateAll
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/PackageDefinitions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#deleteById
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/PackageDefinitions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#count
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/PackageDefinitions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#prototype$updateAttributes
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PackageDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/PackageDefinitions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#createChangeStream
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/PackageDefinitions/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#patchOrCreate
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#updateOrCreate
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#patchOrCreateWithWhere
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#update
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#destroyById
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#removeById
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.PackageDefinition#prototype$patchAttributes
             * @methodOf apim.loopback.PackageDefinition
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PackageDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PackageDefinition` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.PackageDefinition#modelName
        * @propertyOf apim.loopback.PackageDefinition
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PackageDefinition`.
        */
        R.modelName = "PackageDefinition";



        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.Facet
 * @header apim.loopback.Facet
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Facet` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Facet",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Facets/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Facet.settings.findById() instead.
            "prototype$__findById__settings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/settings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Facet.settings.destroyById() instead.
            "prototype$__destroyById__settings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/settings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.settings.updateById() instead.
            "prototype$__updateById__settings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/settings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Facet.modelConfigs.findById() instead.
            "prototype$__findById__modelConfigs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/modelConfigs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Facet.modelConfigs.destroyById() instead.
            "prototype$__destroyById__modelConfigs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/modelConfigs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.modelConfigs.updateById() instead.
            "prototype$__updateById__modelConfigs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/modelConfigs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Facet.models.findById() instead.
            "prototype$__findById__models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/models/:fk",
              method: "GET",
            },

            // INTERNAL. Use Facet.models.destroyById() instead.
            "prototype$__destroyById__models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/models/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.models.updateById() instead.
            "prototype$__updateById__models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/models/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Facet.datasources.findById() instead.
            "prototype$__findById__datasources": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/datasources/:fk",
              method: "GET",
            },

            // INTERNAL. Use Facet.datasources.destroyById() instead.
            "prototype$__destroyById__datasources": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/datasources/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.datasources.updateById() instead.
            "prototype$__updateById__datasources": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/datasources/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Facet.settings() instead.
            "prototype$__get__settings": {
              isArray: true,
              url: urlBase + "/Facets/:id/settings",
              method: "GET",
            },

            // INTERNAL. Use Facet.settings.create() instead.
            "prototype$__create__settings": {
              url: urlBase + "/Facets/:id/settings",
              method: "POST",
            },

            // INTERNAL. Use Facet.settings.destroyAll() instead.
            "prototype$__delete__settings": {
              url: urlBase + "/Facets/:id/settings",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.settings.count() instead.
            "prototype$__count__settings": {
              url: urlBase + "/Facets/:id/settings/count",
              method: "GET",
            },

            // INTERNAL. Use Facet.modelConfigs() instead.
            "prototype$__get__modelConfigs": {
              isArray: true,
              url: urlBase + "/Facets/:id/modelConfigs",
              method: "GET",
            },

            // INTERNAL. Use Facet.modelConfigs.create() instead.
            "prototype$__create__modelConfigs": {
              url: urlBase + "/Facets/:id/modelConfigs",
              method: "POST",
            },

            // INTERNAL. Use Facet.modelConfigs.destroyAll() instead.
            "prototype$__delete__modelConfigs": {
              url: urlBase + "/Facets/:id/modelConfigs",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.modelConfigs.count() instead.
            "prototype$__count__modelConfigs": {
              url: urlBase + "/Facets/:id/modelConfigs/count",
              method: "GET",
            },

            // INTERNAL. Use Facet.models() instead.
            "prototype$__get__models": {
              isArray: true,
              url: urlBase + "/Facets/:id/models",
              method: "GET",
            },

            // INTERNAL. Use Facet.models.create() instead.
            "prototype$__create__models": {
              url: urlBase + "/Facets/:id/models",
              method: "POST",
            },

            // INTERNAL. Use Facet.models.destroyAll() instead.
            "prototype$__delete__models": {
              url: urlBase + "/Facets/:id/models",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.models.count() instead.
            "prototype$__count__models": {
              url: urlBase + "/Facets/:id/models/count",
              method: "GET",
            },

            // INTERNAL. Use Facet.datasources() instead.
            "prototype$__get__datasources": {
              isArray: true,
              url: urlBase + "/Facets/:id/datasources",
              method: "GET",
            },

            // INTERNAL. Use Facet.datasources.create() instead.
            "prototype$__create__datasources": {
              url: urlBase + "/Facets/:id/datasources",
              method: "POST",
            },

            // INTERNAL. Use Facet.datasources.destroyAll() instead.
            "prototype$__delete__datasources": {
              url: urlBase + "/Facets/:id/datasources",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.datasources.count() instead.
            "prototype$__count__datasources": {
              url: urlBase + "/Facets/:id/datasources/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#create
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Facets",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#createMany
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Facets",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#upsert
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Facets",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#replaceOrCreate
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Facets/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#upsertWithWhere
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Facets/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#exists
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Facets/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#findById
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Facets/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#replaceById
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Facets/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#find
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Facets",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#findOne
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Facets/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#updateAll
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Facets/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#deleteById
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Facets/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#count
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Facets/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#prototype$updateAttributes
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Facets/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#createChangeStream
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Facets/change-stream",
              method: "POST",
            },

            // INTERNAL. Use FacetSetting.facet() instead.
            "::get::FacetSetting::facet": {
              url: urlBase + "/FacetSettings/:id/facet",
              method: "GET",
            },

            // INTERNAL. Use ModelConfig.facet() instead.
            "::get::ModelConfig::facet": {
              url: urlBase + "/ModelConfigs/:id/facet",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.facet() instead.
            "::get::ModelDefinition::facet": {
              url: urlBase + "/ModelDefinitions/:id/facet",
              method: "GET",
            },

            // INTERNAL. Use ComponentConfig.facet() instead.
            "::get::ComponentConfig::facet": {
              url: urlBase + "/ComponentConfigs/:id/facet",
              method: "GET",
            },

            // INTERNAL. Use DataSourceDefinition.facet() instead.
            "::get::DataSourceDefinition::facet": {
              url: urlBase + "/DataSourceDefinitions/:id/facet",
              method: "GET",
            },

            // INTERNAL. Use Middleware.facet() instead.
            "::get::Middleware::facet": {
              url: urlBase + "/Middlewares/:id/facet",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.Facet#patchOrCreate
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#updateOrCreate
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#patchOrCreateWithWhere
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#update
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#destroyById
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#removeById
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.Facet#prototype$patchAttributes
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.Facet#modelName
        * @propertyOf apim.loopback.Facet
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Facet`.
        */
        R.modelName = "Facet";

    /**
     * @ngdoc object
     * @name apim.loopback.Facet.settings
     * @header apim.loopback.Facet.settings
     * @object
     * @description
     *
     * The object `Facet.settings` groups methods
     * manipulating `FacetSetting` instances related to `Facet`.
     *
     * Call {@link apim.loopback.Facet#settings Facet.settings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.Facet#settings
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Queries settings of Facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R.settings = function() {
          var TargetResource = $injector.get("FacetSetting");
          var action = TargetResource["::get::Facet::settings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.settings#count
             * @methodOf apim.loopback.Facet.settings
             *
             * @description
             *
             * Counts settings of Facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.settings.count = function() {
          var TargetResource = $injector.get("FacetSetting");
          var action = TargetResource["::count::Facet::settings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.settings#create
             * @methodOf apim.loopback.Facet.settings
             *
             * @description
             *
             * Creates a new instance in settings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R.settings.create = function() {
          var TargetResource = $injector.get("FacetSetting");
          var action = TargetResource["::create::Facet::settings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.settings#createMany
             * @methodOf apim.loopback.Facet.settings
             *
             * @description
             *
             * Creates a new instance in settings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R.settings.createMany = function() {
          var TargetResource = $injector.get("FacetSetting");
          var action = TargetResource["::createMany::Facet::settings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.settings#destroyAll
             * @methodOf apim.loopback.Facet.settings
             *
             * @description
             *
             * Deletes all settings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.settings.destroyAll = function() {
          var TargetResource = $injector.get("FacetSetting");
          var action = TargetResource["::delete::Facet::settings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.settings#destroyById
             * @methodOf apim.loopback.Facet.settings
             *
             * @description
             *
             * Delete a related item by id for settings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for settings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.settings.destroyById = function() {
          var TargetResource = $injector.get("FacetSetting");
          var action = TargetResource["::destroyById::Facet::settings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.settings#findById
             * @methodOf apim.loopback.Facet.settings
             *
             * @description
             *
             * Find a related item by id for settings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for settings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R.settings.findById = function() {
          var TargetResource = $injector.get("FacetSetting");
          var action = TargetResource["::findById::Facet::settings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.settings#updateById
             * @methodOf apim.loopback.Facet.settings
             *
             * @description
             *
             * Update a related item by id for settings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for settings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R.settings.updateById = function() {
          var TargetResource = $injector.get("FacetSetting");
          var action = TargetResource["::updateById::Facet::settings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.Facet.modelConfigs
     * @header apim.loopback.Facet.modelConfigs
     * @object
     * @description
     *
     * The object `Facet.modelConfigs` groups methods
     * manipulating `ModelConfig` instances related to `Facet`.
     *
     * Call {@link apim.loopback.Facet#modelConfigs Facet.modelConfigs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.Facet#modelConfigs
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Queries modelConfigs of Facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.modelConfigs = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::get::Facet::modelConfigs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.modelConfigs#count
             * @methodOf apim.loopback.Facet.modelConfigs
             *
             * @description
             *
             * Counts modelConfigs of Facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.modelConfigs.count = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::count::Facet::modelConfigs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.modelConfigs#create
             * @methodOf apim.loopback.Facet.modelConfigs
             *
             * @description
             *
             * Creates a new instance in modelConfigs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.modelConfigs.create = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::create::Facet::modelConfigs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.modelConfigs#createMany
             * @methodOf apim.loopback.Facet.modelConfigs
             *
             * @description
             *
             * Creates a new instance in modelConfigs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.modelConfigs.createMany = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::createMany::Facet::modelConfigs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.modelConfigs#destroyAll
             * @methodOf apim.loopback.Facet.modelConfigs
             *
             * @description
             *
             * Deletes all modelConfigs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.modelConfigs.destroyAll = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::delete::Facet::modelConfigs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.modelConfigs#destroyById
             * @methodOf apim.loopback.Facet.modelConfigs
             *
             * @description
             *
             * Delete a related item by id for modelConfigs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for modelConfigs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.modelConfigs.destroyById = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::destroyById::Facet::modelConfigs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.modelConfigs#findById
             * @methodOf apim.loopback.Facet.modelConfigs
             *
             * @description
             *
             * Find a related item by id for modelConfigs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for modelConfigs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.modelConfigs.findById = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::findById::Facet::modelConfigs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.modelConfigs#updateById
             * @methodOf apim.loopback.Facet.modelConfigs
             *
             * @description
             *
             * Update a related item by id for modelConfigs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for modelConfigs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.modelConfigs.updateById = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::updateById::Facet::modelConfigs"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.Facet.models
     * @header apim.loopback.Facet.models
     * @object
     * @description
     *
     * The object `Facet.models` groups methods
     * manipulating `ModelDefinition` instances related to `Facet`.
     *
     * Call {@link apim.loopback.Facet#models Facet.models()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.Facet#models
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Queries models of Facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.models = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::get::Facet::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.models#count
             * @methodOf apim.loopback.Facet.models
             *
             * @description
             *
             * Counts models of Facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.models.count = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::count::Facet::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.models#create
             * @methodOf apim.loopback.Facet.models
             *
             * @description
             *
             * Creates a new instance in models of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.models.create = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::create::Facet::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.models#createMany
             * @methodOf apim.loopback.Facet.models
             *
             * @description
             *
             * Creates a new instance in models of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.models.createMany = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::createMany::Facet::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.models#destroyAll
             * @methodOf apim.loopback.Facet.models
             *
             * @description
             *
             * Deletes all models of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.models.destroyAll = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::delete::Facet::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.models#destroyById
             * @methodOf apim.loopback.Facet.models
             *
             * @description
             *
             * Delete a related item by id for models.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for models
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.models.destroyById = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::destroyById::Facet::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.models#findById
             * @methodOf apim.loopback.Facet.models
             *
             * @description
             *
             * Find a related item by id for models.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for models
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.models.findById = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::findById::Facet::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.models#updateById
             * @methodOf apim.loopback.Facet.models
             *
             * @description
             *
             * Update a related item by id for models.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for models
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.models.updateById = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::updateById::Facet::models"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.Facet.datasources
     * @header apim.loopback.Facet.datasources
     * @object
     * @description
     *
     * The object `Facet.datasources` groups methods
     * manipulating `DataSourceDefinition` instances related to `Facet`.
     *
     * Call {@link apim.loopback.Facet#datasources Facet.datasources()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.Facet#datasources
             * @methodOf apim.loopback.Facet
             *
             * @description
             *
             * Queries datasources of Facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R.datasources = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::get::Facet::datasources"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.datasources#count
             * @methodOf apim.loopback.Facet.datasources
             *
             * @description
             *
             * Counts datasources of Facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.datasources.count = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::count::Facet::datasources"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.datasources#create
             * @methodOf apim.loopback.Facet.datasources
             *
             * @description
             *
             * Creates a new instance in datasources of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R.datasources.create = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::create::Facet::datasources"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.datasources#createMany
             * @methodOf apim.loopback.Facet.datasources
             *
             * @description
             *
             * Creates a new instance in datasources of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R.datasources.createMany = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::createMany::Facet::datasources"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.datasources#destroyAll
             * @methodOf apim.loopback.Facet.datasources
             *
             * @description
             *
             * Deletes all datasources of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.datasources.destroyAll = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::delete::Facet::datasources"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.datasources#destroyById
             * @methodOf apim.loopback.Facet.datasources
             *
             * @description
             *
             * Delete a related item by id for datasources.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for datasources
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.datasources.destroyById = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::destroyById::Facet::datasources"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.datasources#findById
             * @methodOf apim.loopback.Facet.datasources
             *
             * @description
             *
             * Find a related item by id for datasources.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for datasources
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R.datasources.findById = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::findById::Facet::datasources"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.Facet.datasources#updateById
             * @methodOf apim.loopback.Facet.datasources
             *
             * @description
             *
             * Update a related item by id for datasources.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Facet id
             *
             *  - `fk` – `{*}` - Foreign key for datasources
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R.datasources.updateById = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::updateById::Facet::datasources"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.FacetSetting
 * @header apim.loopback.FacetSetting
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FacetSetting` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FacetSetting",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FacetSettings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FacetSetting.facet() instead.
            "prototype$__get__facet": {
              url: urlBase + "/FacetSettings/:id/facet",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#create
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FacetSettings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#createMany
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FacetSettings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#upsert
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/FacetSettings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#replaceOrCreate
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FacetSettings/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#upsertWithWhere
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FacetSettings/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#exists
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FacetSettings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#findById
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FacetSettings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#replaceById
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FacetSettings/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#find
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FacetSettings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#findOne
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FacetSettings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#updateAll
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FacetSettings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#deleteById
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FacetSettings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#count
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FacetSettings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#prototype$updateAttributes
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FacetSetting id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/FacetSettings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#createChangeStream
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FacetSettings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Facet.settings.findById() instead.
            "::findById::Facet::settings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/settings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Facet.settings.destroyById() instead.
            "::destroyById::Facet::settings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/settings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.settings.updateById() instead.
            "::updateById::Facet::settings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/settings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Facet.settings() instead.
            "::get::Facet::settings": {
              isArray: true,
              url: urlBase + "/Facets/:id/settings",
              method: "GET",
            },

            // INTERNAL. Use Facet.settings.create() instead.
            "::create::Facet::settings": {
              url: urlBase + "/Facets/:id/settings",
              method: "POST",
            },

            // INTERNAL. Use Facet.settings.createMany() instead.
            "::createMany::Facet::settings": {
              isArray: true,
              url: urlBase + "/Facets/:id/settings",
              method: "POST",
            },

            // INTERNAL. Use Facet.settings.destroyAll() instead.
            "::delete::Facet::settings": {
              url: urlBase + "/Facets/:id/settings",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.settings.count() instead.
            "::count::Facet::settings": {
              url: urlBase + "/Facets/:id/settings/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#patchOrCreate
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#updateOrCreate
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#patchOrCreateWithWhere
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#update
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#destroyById
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#removeById
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#prototype$patchAttributes
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FacetSetting id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacetSetting` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.FacetSetting#modelName
        * @propertyOf apim.loopback.FacetSetting
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FacetSetting`.
        */
        R.modelName = "FacetSetting";


            /**
             * @ngdoc method
             * @name apim.loopback.FacetSetting#facet
             * @methodOf apim.loopback.FacetSetting
             *
             * @description
             *
             * Fetches belongsTo relation facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FacetSetting id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R.facet = function() {
          var TargetResource = $injector.get("Facet");
          var action = TargetResource["::get::FacetSetting::facet"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.ModelConfig
 * @header apim.loopback.ModelConfig
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ModelConfig` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ModelConfig",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ModelConfigs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ModelConfig.facet() instead.
            "prototype$__get__facet": {
              url: urlBase + "/ModelConfigs/:id/facet",
              method: "GET",
            },

            // INTERNAL. Use ModelConfig.definition() instead.
            "prototype$__get__definition": {
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "GET",
            },

            // INTERNAL. Use ModelConfig.definition.create() instead.
            "prototype$__create__definition": {
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "POST",
            },

            // INTERNAL. Use ModelConfig.definition.update() instead.
            "prototype$__update__definition": {
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "PUT",
            },

            // INTERNAL. Use ModelConfig.definition.destroy() instead.
            "prototype$__destroy__definition": {
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "DELETE",
            },

            // INTERNAL. Use ModelConfig.dataSourceRef() instead.
            "prototype$__get__dataSourceRef": {
              url: urlBase + "/ModelConfigs/:id/dataSourceRef",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#create
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ModelConfigs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#createMany
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ModelConfigs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#upsert
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ModelConfigs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#replaceOrCreate
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ModelConfigs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#upsertWithWhere
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ModelConfigs/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#exists
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ModelConfigs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#findById
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ModelConfigs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#replaceById
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ModelConfigs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#find
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ModelConfigs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#findOne
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ModelConfigs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#updateAll
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ModelConfigs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#deleteById
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ModelConfigs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#count
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ModelConfigs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#prototype$updateAttributes
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ModelConfigs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#createChangeStream
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ModelConfigs/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Facet.modelConfigs.findById() instead.
            "::findById::Facet::modelConfigs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/modelConfigs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Facet.modelConfigs.destroyById() instead.
            "::destroyById::Facet::modelConfigs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/modelConfigs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.modelConfigs.updateById() instead.
            "::updateById::Facet::modelConfigs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/modelConfigs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Facet.modelConfigs() instead.
            "::get::Facet::modelConfigs": {
              isArray: true,
              url: urlBase + "/Facets/:id/modelConfigs",
              method: "GET",
            },

            // INTERNAL. Use Facet.modelConfigs.create() instead.
            "::create::Facet::modelConfigs": {
              url: urlBase + "/Facets/:id/modelConfigs",
              method: "POST",
            },

            // INTERNAL. Use Facet.modelConfigs.createMany() instead.
            "::createMany::Facet::modelConfigs": {
              isArray: true,
              url: urlBase + "/Facets/:id/modelConfigs",
              method: "POST",
            },

            // INTERNAL. Use Facet.modelConfigs.destroyAll() instead.
            "::delete::Facet::modelConfigs": {
              url: urlBase + "/Facets/:id/modelConfigs",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.modelConfigs.count() instead.
            "::count::Facet::modelConfigs": {
              url: urlBase + "/Facets/:id/modelConfigs/count",
              method: "GET",
            },

            // INTERNAL. Use DataSourceDefinition.models.findById() instead.
            "::findById::DataSourceDefinition::models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DataSourceDefinitions/:id/models/:fk",
              method: "GET",
            },

            // INTERNAL. Use DataSourceDefinition.models.destroyById() instead.
            "::destroyById::DataSourceDefinition::models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DataSourceDefinitions/:id/models/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DataSourceDefinition.models.updateById() instead.
            "::updateById::DataSourceDefinition::models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DataSourceDefinitions/:id/models/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DataSourceDefinition.models() instead.
            "::get::DataSourceDefinition::models": {
              isArray: true,
              url: urlBase + "/DataSourceDefinitions/:id/models",
              method: "GET",
            },

            // INTERNAL. Use DataSourceDefinition.models.create() instead.
            "::create::DataSourceDefinition::models": {
              url: urlBase + "/DataSourceDefinitions/:id/models",
              method: "POST",
            },

            // INTERNAL. Use DataSourceDefinition.models.createMany() instead.
            "::createMany::DataSourceDefinition::models": {
              isArray: true,
              url: urlBase + "/DataSourceDefinitions/:id/models",
              method: "POST",
            },

            // INTERNAL. Use DataSourceDefinition.models.destroyAll() instead.
            "::delete::DataSourceDefinition::models": {
              url: urlBase + "/DataSourceDefinitions/:id/models",
              method: "DELETE",
            },

            // INTERNAL. Use DataSourceDefinition.models.count() instead.
            "::count::DataSourceDefinition::models": {
              url: urlBase + "/DataSourceDefinitions/:id/models/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#patchOrCreate
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#updateOrCreate
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#patchOrCreateWithWhere
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#update
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#destroyById
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#removeById
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#prototype$patchAttributes
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.ModelConfig#modelName
        * @propertyOf apim.loopback.ModelConfig
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ModelConfig`.
        */
        R.modelName = "ModelConfig";


            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#facet
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Fetches belongsTo relation facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R.facet = function() {
          var TargetResource = $injector.get("Facet");
          var action = TargetResource["::get::ModelConfig::facet"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.ModelConfig.definition
     * @header apim.loopback.ModelConfig.definition
     * @object
     * @description
     *
     * The object `ModelConfig.definition` groups methods
     * manipulating `ModelDefinition` instances related to `ModelConfig`.
     *
     * Call {@link apim.loopback.ModelConfig#definition ModelConfig.definition()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#definition
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Fetches hasOne relation definition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.definition = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::get::ModelConfig::definition"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig.definition#create
             * @methodOf apim.loopback.ModelConfig.definition
             *
             * @description
             *
             * Creates a new instance in definition of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.definition.create = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::create::ModelConfig::definition"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig.definition#createMany
             * @methodOf apim.loopback.ModelConfig.definition
             *
             * @description
             *
             * Creates a new instance in definition of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.definition.createMany = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::createMany::ModelConfig::definition"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig.definition#destroy
             * @methodOf apim.loopback.ModelConfig.definition
             *
             * @description
             *
             * Deletes definition of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.definition.destroy = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::destroy::ModelConfig::definition"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig.definition#update
             * @methodOf apim.loopback.ModelConfig.definition
             *
             * @description
             *
             * Update definition of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.definition.update = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::update::ModelConfig::definition"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelConfig#dataSourceRef
             * @methodOf apim.loopback.ModelConfig
             *
             * @description
             *
             * Fetches belongsTo relation dataSourceRef.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelConfig id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R.dataSourceRef = function() {
          var TargetResource = $injector.get("DataSourceDefinition");
          var action = TargetResource["::get::ModelConfig::dataSourceRef"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.ModelDefinition
 * @header apim.loopback.ModelDefinition
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ModelDefinition` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ModelDefinition",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ModelDefinitions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ModelDefinition.facet() instead.
            "prototype$__get__facet": {
              url: urlBase + "/ModelDefinitions/:id/facet",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.methods.findById() instead.
            "prototype$__findById__methods": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/methods/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.methods.destroyById() instead.
            "prototype$__destroyById__methods": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/methods/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.methods.updateById() instead.
            "prototype$__updateById__methods": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/methods/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.relations.findById() instead.
            "prototype$__findById__relations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/relations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.relations.destroyById() instead.
            "prototype$__destroyById__relations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/relations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.relations.updateById() instead.
            "prototype$__updateById__relations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/relations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.accessControls.findById() instead.
            "prototype$__findById__accessControls": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/accessControls/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.accessControls.destroyById() instead.
            "prototype$__destroyById__accessControls": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/accessControls/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.accessControls.updateById() instead.
            "prototype$__updateById__accessControls": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/accessControls/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.properties.findById() instead.
            "prototype$__findById__properties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/properties/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.properties.destroyById() instead.
            "prototype$__destroyById__properties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/properties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.properties.updateById() instead.
            "prototype$__updateById__properties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/properties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.validations.findById() instead.
            "prototype$__findById__validations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/validations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.validations.destroyById() instead.
            "prototype$__destroyById__validations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/validations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.validations.updateById() instead.
            "prototype$__updateById__validations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/validations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.views.findById() instead.
            "prototype$__findById__views": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/views/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.views.destroyById() instead.
            "prototype$__destroyById__views": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/views/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.views.updateById() instead.
            "prototype$__updateById__views": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/views/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.methods() instead.
            "prototype$__get__methods": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/methods",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.methods.create() instead.
            "prototype$__create__methods": {
              url: urlBase + "/ModelDefinitions/:id/methods",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.methods.destroyAll() instead.
            "prototype$__delete__methods": {
              url: urlBase + "/ModelDefinitions/:id/methods",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.methods.count() instead.
            "prototype$__count__methods": {
              url: urlBase + "/ModelDefinitions/:id/methods/count",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.relations() instead.
            "prototype$__get__relations": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/relations",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.relations.create() instead.
            "prototype$__create__relations": {
              url: urlBase + "/ModelDefinitions/:id/relations",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.relations.destroyAll() instead.
            "prototype$__delete__relations": {
              url: urlBase + "/ModelDefinitions/:id/relations",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.relations.count() instead.
            "prototype$__count__relations": {
              url: urlBase + "/ModelDefinitions/:id/relations/count",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.accessControls() instead.
            "prototype$__get__accessControls": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/accessControls",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.accessControls.create() instead.
            "prototype$__create__accessControls": {
              url: urlBase + "/ModelDefinitions/:id/accessControls",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.accessControls.destroyAll() instead.
            "prototype$__delete__accessControls": {
              url: urlBase + "/ModelDefinitions/:id/accessControls",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.accessControls.count() instead.
            "prototype$__count__accessControls": {
              url: urlBase + "/ModelDefinitions/:id/accessControls/count",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.properties() instead.
            "prototype$__get__properties": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/properties",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.properties.create() instead.
            "prototype$__create__properties": {
              url: urlBase + "/ModelDefinitions/:id/properties",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.properties.destroyAll() instead.
            "prototype$__delete__properties": {
              url: urlBase + "/ModelDefinitions/:id/properties",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.properties.count() instead.
            "prototype$__count__properties": {
              url: urlBase + "/ModelDefinitions/:id/properties/count",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.validations() instead.
            "prototype$__get__validations": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/validations",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.validations.create() instead.
            "prototype$__create__validations": {
              url: urlBase + "/ModelDefinitions/:id/validations",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.validations.destroyAll() instead.
            "prototype$__delete__validations": {
              url: urlBase + "/ModelDefinitions/:id/validations",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.validations.count() instead.
            "prototype$__count__validations": {
              url: urlBase + "/ModelDefinitions/:id/validations/count",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.views() instead.
            "prototype$__get__views": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/views",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.views.create() instead.
            "prototype$__create__views": {
              url: urlBase + "/ModelDefinitions/:id/views",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.views.destroyAll() instead.
            "prototype$__delete__views": {
              url: urlBase + "/ModelDefinitions/:id/views",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.views.count() instead.
            "prototype$__count__views": {
              url: urlBase + "/ModelDefinitions/:id/views/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#create
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ModelDefinitions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#createMany
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ModelDefinitions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#upsert
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ModelDefinitions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#replaceOrCreate
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ModelDefinitions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#upsertWithWhere
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ModelDefinitions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#exists
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ModelDefinitions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#findById
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ModelDefinitions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#replaceById
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ModelDefinitions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#find
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ModelDefinitions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#findOne
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ModelDefinitions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#updateAll
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ModelDefinitions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#deleteById
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ModelDefinitions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#count
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ModelDefinitions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#prototype$updateAttributes
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ModelDefinitions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#createChangeStream
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ModelDefinitions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Facet.models.findById() instead.
            "::findById::Facet::models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/models/:fk",
              method: "GET",
            },

            // INTERNAL. Use Facet.models.destroyById() instead.
            "::destroyById::Facet::models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/models/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.models.updateById() instead.
            "::updateById::Facet::models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/models/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Facet.models() instead.
            "::get::Facet::models": {
              isArray: true,
              url: urlBase + "/Facets/:id/models",
              method: "GET",
            },

            // INTERNAL. Use Facet.models.create() instead.
            "::create::Facet::models": {
              url: urlBase + "/Facets/:id/models",
              method: "POST",
            },

            // INTERNAL. Use Facet.models.createMany() instead.
            "::createMany::Facet::models": {
              isArray: true,
              url: urlBase + "/Facets/:id/models",
              method: "POST",
            },

            // INTERNAL. Use Facet.models.destroyAll() instead.
            "::delete::Facet::models": {
              url: urlBase + "/Facets/:id/models",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.models.count() instead.
            "::count::Facet::models": {
              url: urlBase + "/Facets/:id/models/count",
              method: "GET",
            },

            // INTERNAL. Use ModelConfig.definition() instead.
            "::get::ModelConfig::definition": {
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "GET",
            },

            // INTERNAL. Use ModelConfig.definition.create() instead.
            "::create::ModelConfig::definition": {
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "POST",
            },

            // INTERNAL. Use ModelConfig.definition.createMany() instead.
            "::createMany::ModelConfig::definition": {
              isArray: true,
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "POST",
            },

            // INTERNAL. Use ModelConfig.definition.update() instead.
            "::update::ModelConfig::definition": {
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "PUT",
            },

            // INTERNAL. Use ModelConfig.definition.destroy() instead.
            "::destroy::ModelConfig::definition": {
              url: urlBase + "/ModelConfigs/:id/definition",
              method: "DELETE",
            },

            // INTERNAL. Use ModelRelation.model() instead.
            "::get::ModelRelation::model": {
              url: urlBase + "/ModelRelations/:id/model",
              method: "GET",
            },

            // INTERNAL. Use ModelAccessControl.model() instead.
            "::get::ModelAccessControl::model": {
              url: urlBase + "/ModelAccessControls/:id/model",
              method: "GET",
            },

            // INTERNAL. Use ModelProperty.model() instead.
            "::get::ModelProperty::model": {
              url: urlBase + "/ModelProperties/:id/model",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#patchOrCreate
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#updateOrCreate
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#patchOrCreateWithWhere
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#update
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#destroyById
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#removeById
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#prototype$patchAttributes
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.ModelDefinition#modelName
        * @propertyOf apim.loopback.ModelDefinition
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ModelDefinition`.
        */
        R.modelName = "ModelDefinition";


            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#facet
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Fetches belongsTo relation facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R.facet = function() {
          var TargetResource = $injector.get("Facet");
          var action = TargetResource["::get::ModelDefinition::facet"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.ModelDefinition.methods
     * @header apim.loopback.ModelDefinition.methods
     * @object
     * @description
     *
     * The object `ModelDefinition.methods` groups methods
     * manipulating `ModelMethod` instances related to `ModelDefinition`.
     *
     * Call {@link apim.loopback.ModelDefinition#methods ModelDefinition.methods()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#methods
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Queries methods of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R.methods = function() {
          var TargetResource = $injector.get("ModelMethod");
          var action = TargetResource["::get::ModelDefinition::methods"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.methods#count
             * @methodOf apim.loopback.ModelDefinition.methods
             *
             * @description
             *
             * Counts methods of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.methods.count = function() {
          var TargetResource = $injector.get("ModelMethod");
          var action = TargetResource["::count::ModelDefinition::methods"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.methods#create
             * @methodOf apim.loopback.ModelDefinition.methods
             *
             * @description
             *
             * Creates a new instance in methods of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R.methods.create = function() {
          var TargetResource = $injector.get("ModelMethod");
          var action = TargetResource["::create::ModelDefinition::methods"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.methods#createMany
             * @methodOf apim.loopback.ModelDefinition.methods
             *
             * @description
             *
             * Creates a new instance in methods of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R.methods.createMany = function() {
          var TargetResource = $injector.get("ModelMethod");
          var action = TargetResource["::createMany::ModelDefinition::methods"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.methods#destroyAll
             * @methodOf apim.loopback.ModelDefinition.methods
             *
             * @description
             *
             * Deletes all methods of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.methods.destroyAll = function() {
          var TargetResource = $injector.get("ModelMethod");
          var action = TargetResource["::delete::ModelDefinition::methods"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.methods#destroyById
             * @methodOf apim.loopback.ModelDefinition.methods
             *
             * @description
             *
             * Delete a related item by id for methods.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for methods
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.methods.destroyById = function() {
          var TargetResource = $injector.get("ModelMethod");
          var action = TargetResource["::destroyById::ModelDefinition::methods"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.methods#findById
             * @methodOf apim.loopback.ModelDefinition.methods
             *
             * @description
             *
             * Find a related item by id for methods.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for methods
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R.methods.findById = function() {
          var TargetResource = $injector.get("ModelMethod");
          var action = TargetResource["::findById::ModelDefinition::methods"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.methods#updateById
             * @methodOf apim.loopback.ModelDefinition.methods
             *
             * @description
             *
             * Update a related item by id for methods.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for methods
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R.methods.updateById = function() {
          var TargetResource = $injector.get("ModelMethod");
          var action = TargetResource["::updateById::ModelDefinition::methods"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.ModelDefinition.relations
     * @header apim.loopback.ModelDefinition.relations
     * @object
     * @description
     *
     * The object `ModelDefinition.relations` groups methods
     * manipulating `ModelRelation` instances related to `ModelDefinition`.
     *
     * Call {@link apim.loopback.ModelDefinition#relations ModelDefinition.relations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#relations
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Queries relations of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R.relations = function() {
          var TargetResource = $injector.get("ModelRelation");
          var action = TargetResource["::get::ModelDefinition::relations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.relations#count
             * @methodOf apim.loopback.ModelDefinition.relations
             *
             * @description
             *
             * Counts relations of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.relations.count = function() {
          var TargetResource = $injector.get("ModelRelation");
          var action = TargetResource["::count::ModelDefinition::relations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.relations#create
             * @methodOf apim.loopback.ModelDefinition.relations
             *
             * @description
             *
             * Creates a new instance in relations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R.relations.create = function() {
          var TargetResource = $injector.get("ModelRelation");
          var action = TargetResource["::create::ModelDefinition::relations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.relations#createMany
             * @methodOf apim.loopback.ModelDefinition.relations
             *
             * @description
             *
             * Creates a new instance in relations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R.relations.createMany = function() {
          var TargetResource = $injector.get("ModelRelation");
          var action = TargetResource["::createMany::ModelDefinition::relations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.relations#destroyAll
             * @methodOf apim.loopback.ModelDefinition.relations
             *
             * @description
             *
             * Deletes all relations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.relations.destroyAll = function() {
          var TargetResource = $injector.get("ModelRelation");
          var action = TargetResource["::delete::ModelDefinition::relations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.relations#destroyById
             * @methodOf apim.loopback.ModelDefinition.relations
             *
             * @description
             *
             * Delete a related item by id for relations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for relations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.relations.destroyById = function() {
          var TargetResource = $injector.get("ModelRelation");
          var action = TargetResource["::destroyById::ModelDefinition::relations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.relations#findById
             * @methodOf apim.loopback.ModelDefinition.relations
             *
             * @description
             *
             * Find a related item by id for relations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for relations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R.relations.findById = function() {
          var TargetResource = $injector.get("ModelRelation");
          var action = TargetResource["::findById::ModelDefinition::relations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.relations#updateById
             * @methodOf apim.loopback.ModelDefinition.relations
             *
             * @description
             *
             * Update a related item by id for relations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for relations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R.relations.updateById = function() {
          var TargetResource = $injector.get("ModelRelation");
          var action = TargetResource["::updateById::ModelDefinition::relations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.ModelDefinition.accessControls
     * @header apim.loopback.ModelDefinition.accessControls
     * @object
     * @description
     *
     * The object `ModelDefinition.accessControls` groups methods
     * manipulating `ModelAccessControl` instances related to `ModelDefinition`.
     *
     * Call {@link apim.loopback.ModelDefinition#accessControls ModelDefinition.accessControls()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#accessControls
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Queries accessControls of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R.accessControls = function() {
          var TargetResource = $injector.get("ModelAccessControl");
          var action = TargetResource["::get::ModelDefinition::accessControls"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.accessControls#count
             * @methodOf apim.loopback.ModelDefinition.accessControls
             *
             * @description
             *
             * Counts accessControls of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.accessControls.count = function() {
          var TargetResource = $injector.get("ModelAccessControl");
          var action = TargetResource["::count::ModelDefinition::accessControls"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.accessControls#create
             * @methodOf apim.loopback.ModelDefinition.accessControls
             *
             * @description
             *
             * Creates a new instance in accessControls of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R.accessControls.create = function() {
          var TargetResource = $injector.get("ModelAccessControl");
          var action = TargetResource["::create::ModelDefinition::accessControls"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.accessControls#createMany
             * @methodOf apim.loopback.ModelDefinition.accessControls
             *
             * @description
             *
             * Creates a new instance in accessControls of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R.accessControls.createMany = function() {
          var TargetResource = $injector.get("ModelAccessControl");
          var action = TargetResource["::createMany::ModelDefinition::accessControls"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.accessControls#destroyAll
             * @methodOf apim.loopback.ModelDefinition.accessControls
             *
             * @description
             *
             * Deletes all accessControls of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessControls.destroyAll = function() {
          var TargetResource = $injector.get("ModelAccessControl");
          var action = TargetResource["::delete::ModelDefinition::accessControls"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.accessControls#destroyById
             * @methodOf apim.loopback.ModelDefinition.accessControls
             *
             * @description
             *
             * Delete a related item by id for accessControls.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for accessControls
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessControls.destroyById = function() {
          var TargetResource = $injector.get("ModelAccessControl");
          var action = TargetResource["::destroyById::ModelDefinition::accessControls"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.accessControls#findById
             * @methodOf apim.loopback.ModelDefinition.accessControls
             *
             * @description
             *
             * Find a related item by id for accessControls.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for accessControls
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R.accessControls.findById = function() {
          var TargetResource = $injector.get("ModelAccessControl");
          var action = TargetResource["::findById::ModelDefinition::accessControls"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.accessControls#updateById
             * @methodOf apim.loopback.ModelDefinition.accessControls
             *
             * @description
             *
             * Update a related item by id for accessControls.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for accessControls
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R.accessControls.updateById = function() {
          var TargetResource = $injector.get("ModelAccessControl");
          var action = TargetResource["::updateById::ModelDefinition::accessControls"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.ModelDefinition.properties
     * @header apim.loopback.ModelDefinition.properties
     * @object
     * @description
     *
     * The object `ModelDefinition.properties` groups methods
     * manipulating `ModelProperty` instances related to `ModelDefinition`.
     *
     * Call {@link apim.loopback.ModelDefinition#properties ModelDefinition.properties()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#properties
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Queries properties of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R.properties = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::get::ModelDefinition::properties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.properties#count
             * @methodOf apim.loopback.ModelDefinition.properties
             *
             * @description
             *
             * Counts properties of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.properties.count = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::count::ModelDefinition::properties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.properties#create
             * @methodOf apim.loopback.ModelDefinition.properties
             *
             * @description
             *
             * Creates a new instance in properties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R.properties.create = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::create::ModelDefinition::properties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.properties#createMany
             * @methodOf apim.loopback.ModelDefinition.properties
             *
             * @description
             *
             * Creates a new instance in properties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R.properties.createMany = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::createMany::ModelDefinition::properties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.properties#destroyAll
             * @methodOf apim.loopback.ModelDefinition.properties
             *
             * @description
             *
             * Deletes all properties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.properties.destroyAll = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::delete::ModelDefinition::properties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.properties#destroyById
             * @methodOf apim.loopback.ModelDefinition.properties
             *
             * @description
             *
             * Delete a related item by id for properties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for properties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.properties.destroyById = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::destroyById::ModelDefinition::properties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.properties#findById
             * @methodOf apim.loopback.ModelDefinition.properties
             *
             * @description
             *
             * Find a related item by id for properties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for properties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R.properties.findById = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::findById::ModelDefinition::properties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.properties#updateById
             * @methodOf apim.loopback.ModelDefinition.properties
             *
             * @description
             *
             * Update a related item by id for properties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for properties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R.properties.updateById = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::updateById::ModelDefinition::properties"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.ModelDefinition.validations
     * @header apim.loopback.ModelDefinition.validations
     * @object
     * @description
     *
     * The object `ModelDefinition.validations` groups methods
     * manipulating `PropertyValidation` instances related to `ModelDefinition`.
     *
     * Call {@link apim.loopback.ModelDefinition#validations ModelDefinition.validations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#validations
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Queries validations of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R.validations = function() {
          var TargetResource = $injector.get("PropertyValidation");
          var action = TargetResource["::get::ModelDefinition::validations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.validations#count
             * @methodOf apim.loopback.ModelDefinition.validations
             *
             * @description
             *
             * Counts validations of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.validations.count = function() {
          var TargetResource = $injector.get("PropertyValidation");
          var action = TargetResource["::count::ModelDefinition::validations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.validations#create
             * @methodOf apim.loopback.ModelDefinition.validations
             *
             * @description
             *
             * Creates a new instance in validations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R.validations.create = function() {
          var TargetResource = $injector.get("PropertyValidation");
          var action = TargetResource["::create::ModelDefinition::validations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.validations#createMany
             * @methodOf apim.loopback.ModelDefinition.validations
             *
             * @description
             *
             * Creates a new instance in validations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R.validations.createMany = function() {
          var TargetResource = $injector.get("PropertyValidation");
          var action = TargetResource["::createMany::ModelDefinition::validations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.validations#destroyAll
             * @methodOf apim.loopback.ModelDefinition.validations
             *
             * @description
             *
             * Deletes all validations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.validations.destroyAll = function() {
          var TargetResource = $injector.get("PropertyValidation");
          var action = TargetResource["::delete::ModelDefinition::validations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.validations#destroyById
             * @methodOf apim.loopback.ModelDefinition.validations
             *
             * @description
             *
             * Delete a related item by id for validations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for validations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.validations.destroyById = function() {
          var TargetResource = $injector.get("PropertyValidation");
          var action = TargetResource["::destroyById::ModelDefinition::validations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.validations#findById
             * @methodOf apim.loopback.ModelDefinition.validations
             *
             * @description
             *
             * Find a related item by id for validations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for validations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R.validations.findById = function() {
          var TargetResource = $injector.get("PropertyValidation");
          var action = TargetResource["::findById::ModelDefinition::validations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.validations#updateById
             * @methodOf apim.loopback.ModelDefinition.validations
             *
             * @description
             *
             * Update a related item by id for validations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for validations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R.validations.updateById = function() {
          var TargetResource = $injector.get("PropertyValidation");
          var action = TargetResource["::updateById::ModelDefinition::validations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apim.loopback.ModelDefinition.views
     * @header apim.loopback.ModelDefinition.views
     * @object
     * @description
     *
     * The object `ModelDefinition.views` groups methods
     * manipulating `ViewDefinition` instances related to `ModelDefinition`.
     *
     * Call {@link apim.loopback.ModelDefinition#views ModelDefinition.views()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition#views
             * @methodOf apim.loopback.ModelDefinition
             *
             * @description
             *
             * Queries views of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.views = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::get::ModelDefinition::views"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.views#count
             * @methodOf apim.loopback.ModelDefinition.views
             *
             * @description
             *
             * Counts views of ModelDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.views.count = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::count::ModelDefinition::views"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.views#create
             * @methodOf apim.loopback.ModelDefinition.views
             *
             * @description
             *
             * Creates a new instance in views of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.views.create = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::create::ModelDefinition::views"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.views#createMany
             * @methodOf apim.loopback.ModelDefinition.views
             *
             * @description
             *
             * Creates a new instance in views of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.views.createMany = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::createMany::ModelDefinition::views"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.views#destroyAll
             * @methodOf apim.loopback.ModelDefinition.views
             *
             * @description
             *
             * Deletes all views of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.views.destroyAll = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::delete::ModelDefinition::views"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.views#destroyById
             * @methodOf apim.loopback.ModelDefinition.views
             *
             * @description
             *
             * Delete a related item by id for views.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for views
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.views.destroyById = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::destroyById::ModelDefinition::views"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.views#findById
             * @methodOf apim.loopback.ModelDefinition.views
             *
             * @description
             *
             * Find a related item by id for views.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for views
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.views.findById = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::findById::ModelDefinition::views"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ModelDefinition.views#updateById
             * @methodOf apim.loopback.ModelDefinition.views
             *
             * @description
             *
             * Update a related item by id for views.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for views
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.views.updateById = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::updateById::ModelDefinition::views"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.ModelMethod
 * @header apim.loopback.ModelMethod
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ModelMethod` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ModelMethod",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ModelMethods/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#create
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ModelMethods",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#createMany
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ModelMethods",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#upsert
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ModelMethods",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#replaceOrCreate
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ModelMethods/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#upsertWithWhere
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ModelMethods/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#exists
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ModelMethods/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#findById
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ModelMethods/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#replaceById
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ModelMethods/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#find
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ModelMethods",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#findOne
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ModelMethods/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#updateAll
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ModelMethods/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#deleteById
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ModelMethods/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#count
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ModelMethods/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#prototype$updateAttributes
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelMethod id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ModelMethods/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#createChangeStream
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ModelMethods/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.methods.findById() instead.
            "::findById::ModelDefinition::methods": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/methods/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.methods.destroyById() instead.
            "::destroyById::ModelDefinition::methods": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/methods/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.methods.updateById() instead.
            "::updateById::ModelDefinition::methods": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/methods/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.methods() instead.
            "::get::ModelDefinition::methods": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/methods",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.methods.create() instead.
            "::create::ModelDefinition::methods": {
              url: urlBase + "/ModelDefinitions/:id/methods",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.methods.createMany() instead.
            "::createMany::ModelDefinition::methods": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/methods",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.methods.destroyAll() instead.
            "::delete::ModelDefinition::methods": {
              url: urlBase + "/ModelDefinitions/:id/methods",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.methods.count() instead.
            "::count::ModelDefinition::methods": {
              url: urlBase + "/ModelDefinitions/:id/methods/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#patchOrCreate
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#updateOrCreate
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#patchOrCreateWithWhere
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#update
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#destroyById
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#removeById
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelMethod#prototype$patchAttributes
             * @methodOf apim.loopback.ModelMethod
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelMethod id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelMethod` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.ModelMethod#modelName
        * @propertyOf apim.loopback.ModelMethod
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ModelMethod`.
        */
        R.modelName = "ModelMethod";



        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.ModelRelation
 * @header apim.loopback.ModelRelation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ModelRelation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ModelRelation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ModelRelations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ModelRelation.model() instead.
            "prototype$__get__model": {
              url: urlBase + "/ModelRelations/:id/model",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#create
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ModelRelations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#createMany
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ModelRelations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#upsert
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ModelRelations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#replaceOrCreate
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ModelRelations/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#upsertWithWhere
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ModelRelations/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#exists
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ModelRelations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#findById
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ModelRelations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#replaceById
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ModelRelations/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#find
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ModelRelations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#findOne
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ModelRelations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#updateAll
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ModelRelations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#deleteById
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ModelRelations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#count
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ModelRelations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#prototype$updateAttributes
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelRelation id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ModelRelations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#createChangeStream
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ModelRelations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.relations.findById() instead.
            "::findById::ModelDefinition::relations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/relations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.relations.destroyById() instead.
            "::destroyById::ModelDefinition::relations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/relations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.relations.updateById() instead.
            "::updateById::ModelDefinition::relations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/relations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.relations() instead.
            "::get::ModelDefinition::relations": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/relations",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.relations.create() instead.
            "::create::ModelDefinition::relations": {
              url: urlBase + "/ModelDefinitions/:id/relations",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.relations.createMany() instead.
            "::createMany::ModelDefinition::relations": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/relations",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.relations.destroyAll() instead.
            "::delete::ModelDefinition::relations": {
              url: urlBase + "/ModelDefinitions/:id/relations",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.relations.count() instead.
            "::count::ModelDefinition::relations": {
              url: urlBase + "/ModelDefinitions/:id/relations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#patchOrCreate
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#updateOrCreate
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#patchOrCreateWithWhere
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#update
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#destroyById
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#removeById
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#prototype$patchAttributes
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelRelation id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelRelation` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.ModelRelation#modelName
        * @propertyOf apim.loopback.ModelRelation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ModelRelation`.
        */
        R.modelName = "ModelRelation";


            /**
             * @ngdoc method
             * @name apim.loopback.ModelRelation#model
             * @methodOf apim.loopback.ModelRelation
             *
             * @description
             *
             * Fetches belongsTo relation model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelRelation id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.model = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::get::ModelRelation::model"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.ModelAccessControl
 * @header apim.loopback.ModelAccessControl
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ModelAccessControl` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ModelAccessControl",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ModelAccessControls/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ModelAccessControl.model() instead.
            "prototype$__get__model": {
              url: urlBase + "/ModelAccessControls/:id/model",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#create
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ModelAccessControls",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#createMany
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ModelAccessControls",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#upsert
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ModelAccessControls",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#replaceOrCreate
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ModelAccessControls/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#upsertWithWhere
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ModelAccessControls/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#exists
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ModelAccessControls/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#findById
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ModelAccessControls/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#replaceById
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ModelAccessControls/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#find
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ModelAccessControls",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#findOne
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ModelAccessControls/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#updateAll
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ModelAccessControls/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#deleteById
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ModelAccessControls/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#count
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ModelAccessControls/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#prototype$updateAttributes
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelAccessControl id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ModelAccessControls/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#createChangeStream
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ModelAccessControls/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.accessControls.findById() instead.
            "::findById::ModelDefinition::accessControls": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/accessControls/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.accessControls.destroyById() instead.
            "::destroyById::ModelDefinition::accessControls": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/accessControls/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.accessControls.updateById() instead.
            "::updateById::ModelDefinition::accessControls": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/accessControls/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.accessControls() instead.
            "::get::ModelDefinition::accessControls": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/accessControls",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.accessControls.create() instead.
            "::create::ModelDefinition::accessControls": {
              url: urlBase + "/ModelDefinitions/:id/accessControls",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.accessControls.createMany() instead.
            "::createMany::ModelDefinition::accessControls": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/accessControls",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.accessControls.destroyAll() instead.
            "::delete::ModelDefinition::accessControls": {
              url: urlBase + "/ModelDefinitions/:id/accessControls",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.accessControls.count() instead.
            "::count::ModelDefinition::accessControls": {
              url: urlBase + "/ModelDefinitions/:id/accessControls/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#patchOrCreate
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#updateOrCreate
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#patchOrCreateWithWhere
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#update
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#destroyById
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#removeById
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#prototype$patchAttributes
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelAccessControl id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelAccessControl` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.ModelAccessControl#modelName
        * @propertyOf apim.loopback.ModelAccessControl
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ModelAccessControl`.
        */
        R.modelName = "ModelAccessControl";


            /**
             * @ngdoc method
             * @name apim.loopback.ModelAccessControl#model
             * @methodOf apim.loopback.ModelAccessControl
             *
             * @description
             *
             * Fetches belongsTo relation model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelAccessControl id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.model = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::get::ModelAccessControl::model"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.ModelProperty
 * @header apim.loopback.ModelProperty
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ModelProperty` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ModelProperty",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ModelProperties/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ModelProperty.model() instead.
            "prototype$__get__model": {
              url: urlBase + "/ModelProperties/:id/model",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#create
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ModelProperties",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#createMany
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ModelProperties",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#upsert
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ModelProperties",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#replaceOrCreate
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ModelProperties/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#upsertWithWhere
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ModelProperties/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#exists
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ModelProperties/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#findById
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ModelProperties/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#replaceById
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ModelProperties/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#find
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ModelProperties",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#findOne
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ModelProperties/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#updateAll
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ModelProperties/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#deleteById
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ModelProperties/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#count
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ModelProperties/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#prototype$updateAttributes
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelProperty id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ModelProperties/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#createChangeStream
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ModelProperties/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#getAvailableTypes
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
            "getAvailableTypes": {
              isArray: true,
              url: urlBase + "/ModelProperties/available-types",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.properties.findById() instead.
            "::findById::ModelDefinition::properties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/properties/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.properties.destroyById() instead.
            "::destroyById::ModelDefinition::properties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/properties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.properties.updateById() instead.
            "::updateById::ModelDefinition::properties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/properties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.properties() instead.
            "::get::ModelDefinition::properties": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/properties",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.properties.create() instead.
            "::create::ModelDefinition::properties": {
              url: urlBase + "/ModelDefinitions/:id/properties",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.properties.createMany() instead.
            "::createMany::ModelDefinition::properties": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/properties",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.properties.destroyAll() instead.
            "::delete::ModelDefinition::properties": {
              url: urlBase + "/ModelDefinitions/:id/properties",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.properties.count() instead.
            "::count::ModelDefinition::properties": {
              url: urlBase + "/ModelDefinitions/:id/properties/count",
              method: "GET",
            },

            // INTERNAL. Use PropertyValidation.model() instead.
            "::get::PropertyValidation::model": {
              url: urlBase + "/PropertyValidations/:id/model",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#patchOrCreate
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#updateOrCreate
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#patchOrCreateWithWhere
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#update
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#destroyById
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#removeById
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#prototype$patchAttributes
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelProperty id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.ModelProperty#modelName
        * @propertyOf apim.loopback.ModelProperty
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ModelProperty`.
        */
        R.modelName = "ModelProperty";


            /**
             * @ngdoc method
             * @name apim.loopback.ModelProperty#model
             * @methodOf apim.loopback.ModelProperty
             *
             * @description
             *
             * Fetches belongsTo relation model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ModelProperty id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelDefinition` object.)
             * </em>
             */
        R.model = function() {
          var TargetResource = $injector.get("ModelDefinition");
          var action = TargetResource["::get::ModelProperty::model"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.DatabaseColumn
 * @header apim.loopback.DatabaseColumn
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DatabaseColumn` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "DatabaseColumn",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/DatabaseColumns/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#create
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/DatabaseColumns",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#createMany
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/DatabaseColumns",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#upsert
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/DatabaseColumns",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#replaceOrCreate
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/DatabaseColumns/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#upsertWithWhere
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/DatabaseColumns/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#exists
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/DatabaseColumns/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#findById
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/DatabaseColumns/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#replaceById
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/DatabaseColumns/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#find
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/DatabaseColumns",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#findOne
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/DatabaseColumns/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#updateAll
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/DatabaseColumns/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#deleteById
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/DatabaseColumns/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#count
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/DatabaseColumns/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#prototype$updateAttributes
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DatabaseColumn id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/DatabaseColumns/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#createChangeStream
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/DatabaseColumns/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#patchOrCreate
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#updateOrCreate
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#patchOrCreateWithWhere
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#update
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#destroyById
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#removeById
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.DatabaseColumn#prototype$patchAttributes
             * @methodOf apim.loopback.DatabaseColumn
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DatabaseColumn id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DatabaseColumn` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.DatabaseColumn#modelName
        * @propertyOf apim.loopback.DatabaseColumn
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DatabaseColumn`.
        */
        R.modelName = "DatabaseColumn";



        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.PropertyValidation
 * @header apim.loopback.PropertyValidation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PropertyValidation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PropertyValidation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/PropertyValidations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use PropertyValidation.model() instead.
            "prototype$__get__model": {
              url: urlBase + "/PropertyValidations/:id/model",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#create
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/PropertyValidations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#createMany
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/PropertyValidations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#upsert
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/PropertyValidations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#replaceOrCreate
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/PropertyValidations/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#upsertWithWhere
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/PropertyValidations/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#exists
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/PropertyValidations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#findById
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/PropertyValidations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#replaceById
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/PropertyValidations/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#find
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/PropertyValidations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#findOne
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/PropertyValidations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#updateAll
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/PropertyValidations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#deleteById
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/PropertyValidations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#count
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/PropertyValidations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#prototype$updateAttributes
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PropertyValidation id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/PropertyValidations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#createChangeStream
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/PropertyValidations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.validations.findById() instead.
            "::findById::ModelDefinition::validations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/validations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.validations.destroyById() instead.
            "::destroyById::ModelDefinition::validations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/validations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.validations.updateById() instead.
            "::updateById::ModelDefinition::validations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/validations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.validations() instead.
            "::get::ModelDefinition::validations": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/validations",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.validations.create() instead.
            "::create::ModelDefinition::validations": {
              url: urlBase + "/ModelDefinitions/:id/validations",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.validations.createMany() instead.
            "::createMany::ModelDefinition::validations": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/validations",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.validations.destroyAll() instead.
            "::delete::ModelDefinition::validations": {
              url: urlBase + "/ModelDefinitions/:id/validations",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.validations.count() instead.
            "::count::ModelDefinition::validations": {
              url: urlBase + "/ModelDefinitions/:id/validations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#patchOrCreate
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#updateOrCreate
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#patchOrCreateWithWhere
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#update
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#destroyById
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#removeById
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#prototype$patchAttributes
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PropertyValidation id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PropertyValidation` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.PropertyValidation#modelName
        * @propertyOf apim.loopback.PropertyValidation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PropertyValidation`.
        */
        R.modelName = "PropertyValidation";


            /**
             * @ngdoc method
             * @name apim.loopback.PropertyValidation#model
             * @methodOf apim.loopback.PropertyValidation
             *
             * @description
             *
             * Fetches belongsTo relation model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PropertyValidation id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelProperty` object.)
             * </em>
             */
        R.model = function() {
          var TargetResource = $injector.get("ModelProperty");
          var action = TargetResource["::get::PropertyValidation::model"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.ViewDefinition
 * @header apim.loopback.ViewDefinition
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ViewDefinition` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ViewDefinition",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ViewDefinitions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ViewDefinition.children.findById() instead.
            "prototype$__findById__children": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ViewDefinitions/:id/children/:fk",
              method: "GET",
            },

            // INTERNAL. Use ViewDefinition.children.destroyById() instead.
            "prototype$__destroyById__children": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ViewDefinitions/:id/children/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ViewDefinition.children.updateById() instead.
            "prototype$__updateById__children": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ViewDefinitions/:id/children/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ViewDefinition.children() instead.
            "prototype$__get__children": {
              isArray: true,
              url: urlBase + "/ViewDefinitions/:id/children",
              method: "GET",
            },

            // INTERNAL. Use ViewDefinition.children.create() instead.
            "prototype$__create__children": {
              url: urlBase + "/ViewDefinitions/:id/children",
              method: "POST",
            },

            // INTERNAL. Use ViewDefinition.children.destroyAll() instead.
            "prototype$__delete__children": {
              url: urlBase + "/ViewDefinitions/:id/children",
              method: "DELETE",
            },

            // INTERNAL. Use ViewDefinition.children.count() instead.
            "prototype$__count__children": {
              url: urlBase + "/ViewDefinitions/:id/children/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#create
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ViewDefinitions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#createMany
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ViewDefinitions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#upsert
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ViewDefinitions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#replaceOrCreate
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ViewDefinitions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#upsertWithWhere
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ViewDefinitions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#exists
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ViewDefinitions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#findById
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ViewDefinitions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#replaceById
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ViewDefinitions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#find
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ViewDefinitions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#findOne
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ViewDefinitions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#updateAll
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ViewDefinitions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#deleteById
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ViewDefinitions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#count
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ViewDefinitions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#prototype$updateAttributes
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ViewDefinitions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#createChangeStream
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ViewDefinitions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.views.findById() instead.
            "::findById::ModelDefinition::views": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/views/:fk",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.views.destroyById() instead.
            "::destroyById::ModelDefinition::views": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/views/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.views.updateById() instead.
            "::updateById::ModelDefinition::views": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ModelDefinitions/:id/views/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ModelDefinition.views() instead.
            "::get::ModelDefinition::views": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/views",
              method: "GET",
            },

            // INTERNAL. Use ModelDefinition.views.create() instead.
            "::create::ModelDefinition::views": {
              url: urlBase + "/ModelDefinitions/:id/views",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.views.createMany() instead.
            "::createMany::ModelDefinition::views": {
              isArray: true,
              url: urlBase + "/ModelDefinitions/:id/views",
              method: "POST",
            },

            // INTERNAL. Use ModelDefinition.views.destroyAll() instead.
            "::delete::ModelDefinition::views": {
              url: urlBase + "/ModelDefinitions/:id/views",
              method: "DELETE",
            },

            // INTERNAL. Use ModelDefinition.views.count() instead.
            "::count::ModelDefinition::views": {
              url: urlBase + "/ModelDefinitions/:id/views/count",
              method: "GET",
            },

            // INTERNAL. Use ViewDefinition.children.findById() instead.
            "::findById::ViewDefinition::children": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ViewDefinitions/:id/children/:fk",
              method: "GET",
            },

            // INTERNAL. Use ViewDefinition.children.destroyById() instead.
            "::destroyById::ViewDefinition::children": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ViewDefinitions/:id/children/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ViewDefinition.children.updateById() instead.
            "::updateById::ViewDefinition::children": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ViewDefinitions/:id/children/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ViewDefinition.children() instead.
            "::get::ViewDefinition::children": {
              isArray: true,
              url: urlBase + "/ViewDefinitions/:id/children",
              method: "GET",
            },

            // INTERNAL. Use ViewDefinition.children.create() instead.
            "::create::ViewDefinition::children": {
              url: urlBase + "/ViewDefinitions/:id/children",
              method: "POST",
            },

            // INTERNAL. Use ViewDefinition.children.createMany() instead.
            "::createMany::ViewDefinition::children": {
              isArray: true,
              url: urlBase + "/ViewDefinitions/:id/children",
              method: "POST",
            },

            // INTERNAL. Use ViewDefinition.children.destroyAll() instead.
            "::delete::ViewDefinition::children": {
              url: urlBase + "/ViewDefinitions/:id/children",
              method: "DELETE",
            },

            // INTERNAL. Use ViewDefinition.children.count() instead.
            "::count::ViewDefinition::children": {
              url: urlBase + "/ViewDefinitions/:id/children/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#patchOrCreate
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#updateOrCreate
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#patchOrCreateWithWhere
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#update
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#destroyById
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#removeById
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#prototype$patchAttributes
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.ViewDefinition#modelName
        * @propertyOf apim.loopback.ViewDefinition
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ViewDefinition`.
        */
        R.modelName = "ViewDefinition";

    /**
     * @ngdoc object
     * @name apim.loopback.ViewDefinition.children
     * @header apim.loopback.ViewDefinition.children
     * @object
     * @description
     *
     * The object `ViewDefinition.children` groups methods
     * manipulating `ViewDefinition` instances related to `ViewDefinition`.
     *
     * Call {@link apim.loopback.ViewDefinition#children ViewDefinition.children()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition#children
             * @methodOf apim.loopback.ViewDefinition
             *
             * @description
             *
             * Queries children of ViewDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.children = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::get::ViewDefinition::children"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition.children#count
             * @methodOf apim.loopback.ViewDefinition.children
             *
             * @description
             *
             * Counts children of ViewDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.children.count = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::count::ViewDefinition::children"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition.children#create
             * @methodOf apim.loopback.ViewDefinition.children
             *
             * @description
             *
             * Creates a new instance in children of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.children.create = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::create::ViewDefinition::children"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition.children#createMany
             * @methodOf apim.loopback.ViewDefinition.children
             *
             * @description
             *
             * Creates a new instance in children of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.children.createMany = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::createMany::ViewDefinition::children"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition.children#destroyAll
             * @methodOf apim.loopback.ViewDefinition.children
             *
             * @description
             *
             * Deletes all children of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.children.destroyAll = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::delete::ViewDefinition::children"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition.children#destroyById
             * @methodOf apim.loopback.ViewDefinition.children
             *
             * @description
             *
             * Delete a related item by id for children.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for children
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.children.destroyById = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::destroyById::ViewDefinition::children"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition.children#findById
             * @methodOf apim.loopback.ViewDefinition.children
             *
             * @description
             *
             * Find a related item by id for children.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for children
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.children.findById = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::findById::ViewDefinition::children"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.ViewDefinition.children#updateById
             * @methodOf apim.loopback.ViewDefinition.children
             *
             * @description
             *
             * Update a related item by id for children.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ViewDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for children
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ViewDefinition` object.)
             * </em>
             */
        R.children.updateById = function() {
          var TargetResource = $injector.get("ViewDefinition");
          var action = TargetResource["::updateById::ViewDefinition::children"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.ComponentConfig
 * @header apim.loopback.ComponentConfig
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ComponentConfig` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ComponentConfig",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ComponentConfigs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ComponentConfig.facet() instead.
            "prototype$__get__facet": {
              url: urlBase + "/ComponentConfigs/:id/facet",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#create
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ComponentConfigs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#createMany
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ComponentConfigs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#upsert
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ComponentConfigs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#replaceOrCreate
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ComponentConfigs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#upsertWithWhere
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ComponentConfigs/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#exists
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ComponentConfigs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#findById
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ComponentConfigs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#replaceById
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ComponentConfigs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#find
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ComponentConfigs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#findOne
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ComponentConfigs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#updateAll
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ComponentConfigs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#deleteById
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ComponentConfigs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#count
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ComponentConfigs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#prototype$updateAttributes
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ComponentConfig id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ComponentConfigs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#createChangeStream
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ComponentConfigs/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#patchOrCreate
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#updateOrCreate
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#patchOrCreateWithWhere
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#update
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#destroyById
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#removeById
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#prototype$patchAttributes
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ComponentConfig id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ComponentConfig` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.ComponentConfig#modelName
        * @propertyOf apim.loopback.ComponentConfig
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ComponentConfig`.
        */
        R.modelName = "ComponentConfig";


            /**
             * @ngdoc method
             * @name apim.loopback.ComponentConfig#facet
             * @methodOf apim.loopback.ComponentConfig
             *
             * @description
             *
             * Fetches belongsTo relation facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ComponentConfig id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R.facet = function() {
          var TargetResource = $injector.get("Facet");
          var action = TargetResource["::get::ComponentConfig::facet"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.DataSourceDefinition
 * @header apim.loopback.DataSourceDefinition
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DataSourceDefinition` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "DataSourceDefinition",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/DataSourceDefinitions/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#prototype$testConnection
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `status` – `{boolean=}` -
             *
             *  - `error` – `{object=}` -
             */
            "prototype$testConnection": {
              url: urlBase + "/DataSourceDefinitions/:id/testConnection",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#prototype$discoverModelDefinition
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `tableName` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `status` – `{boolean=}` -
             */
            "prototype$discoverModelDefinition": {
              url: urlBase + "/DataSourceDefinitions/:id/discoverModelDefinition",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#prototype$getSchema
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `models` – `{*=}` -
             */
            "prototype$getSchema": {
              url: urlBase + "/DataSourceDefinitions/:id/getSchema",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#prototype$automigrate
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             * @param {Object} postData Request data.
             *
             *  - `modelName` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `success` – `{boolean=}` -
             */
            "prototype$automigrate": {
              url: urlBase + "/DataSourceDefinitions/:id/automigrate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#prototype$autoupdate
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             * @param {Object} postData Request data.
             *
             *  - `modelName` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `success` – `{boolean=}` -
             */
            "prototype$autoupdate": {
              url: urlBase + "/DataSourceDefinitions/:id/autoupdate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#prototype$createModel
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             * @param {Object} postData Request data.
             *
             *  - `discoveredDef` – `{object=}` - usually the result of discoverModelDefinition
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `modelDefinitionId` – `{string=}` -
             */
            "prototype$createModel": {
              url: urlBase + "/DataSourceDefinitions/:id/createModel",
              method: "POST",
            },

            // INTERNAL. Use DataSourceDefinition.models.findById() instead.
            "prototype$__findById__models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DataSourceDefinitions/:id/models/:fk",
              method: "GET",
            },

            // INTERNAL. Use DataSourceDefinition.models.destroyById() instead.
            "prototype$__destroyById__models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DataSourceDefinitions/:id/models/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DataSourceDefinition.models.updateById() instead.
            "prototype$__updateById__models": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DataSourceDefinitions/:id/models/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DataSourceDefinition.facet() instead.
            "prototype$__get__facet": {
              url: urlBase + "/DataSourceDefinitions/:id/facet",
              method: "GET",
            },

            // INTERNAL. Use DataSourceDefinition.models() instead.
            "prototype$__get__models": {
              isArray: true,
              url: urlBase + "/DataSourceDefinitions/:id/models",
              method: "GET",
            },

            // INTERNAL. Use DataSourceDefinition.models.create() instead.
            "prototype$__create__models": {
              url: urlBase + "/DataSourceDefinitions/:id/models",
              method: "POST",
            },

            // INTERNAL. Use DataSourceDefinition.models.destroyAll() instead.
            "prototype$__delete__models": {
              url: urlBase + "/DataSourceDefinitions/:id/models",
              method: "DELETE",
            },

            // INTERNAL. Use DataSourceDefinition.models.count() instead.
            "prototype$__count__models": {
              url: urlBase + "/DataSourceDefinitions/:id/models/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#create
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/DataSourceDefinitions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#createMany
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/DataSourceDefinitions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#upsert
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/DataSourceDefinitions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#replaceOrCreate
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/DataSourceDefinitions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#upsertWithWhere
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/DataSourceDefinitions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#exists
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/DataSourceDefinitions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#findById
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/DataSourceDefinitions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#replaceById
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/DataSourceDefinitions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#find
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/DataSourceDefinitions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#findOne
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/DataSourceDefinitions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#updateAll
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/DataSourceDefinitions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#deleteById
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/DataSourceDefinitions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#count
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/DataSourceDefinitions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#prototype$updateAttributes
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/DataSourceDefinitions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#createChangeStream
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/DataSourceDefinitions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#testConnection
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `status` – `{boolean=}` -
             */
            "testConnection": {
              url: urlBase + "/DataSourceDefinitions/testConnection",
              method: "POST",
            },

            // INTERNAL. Use Facet.datasources.findById() instead.
            "::findById::Facet::datasources": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/datasources/:fk",
              method: "GET",
            },

            // INTERNAL. Use Facet.datasources.destroyById() instead.
            "::destroyById::Facet::datasources": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/datasources/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.datasources.updateById() instead.
            "::updateById::Facet::datasources": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Facets/:id/datasources/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Facet.datasources() instead.
            "::get::Facet::datasources": {
              isArray: true,
              url: urlBase + "/Facets/:id/datasources",
              method: "GET",
            },

            // INTERNAL. Use Facet.datasources.create() instead.
            "::create::Facet::datasources": {
              url: urlBase + "/Facets/:id/datasources",
              method: "POST",
            },

            // INTERNAL. Use Facet.datasources.createMany() instead.
            "::createMany::Facet::datasources": {
              isArray: true,
              url: urlBase + "/Facets/:id/datasources",
              method: "POST",
            },

            // INTERNAL. Use Facet.datasources.destroyAll() instead.
            "::delete::Facet::datasources": {
              url: urlBase + "/Facets/:id/datasources",
              method: "DELETE",
            },

            // INTERNAL. Use Facet.datasources.count() instead.
            "::count::Facet::datasources": {
              url: urlBase + "/Facets/:id/datasources/count",
              method: "GET",
            },

            // INTERNAL. Use ModelConfig.dataSourceRef() instead.
            "::get::ModelConfig::dataSourceRef": {
              url: urlBase + "/ModelConfigs/:id/dataSourceRef",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#patchOrCreate
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#updateOrCreate
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#patchOrCreateWithWhere
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#update
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#destroyById
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#removeById
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#prototype$patchAttributes
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DataSourceDefinition` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.DataSourceDefinition#modelName
        * @propertyOf apim.loopback.DataSourceDefinition
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DataSourceDefinition`.
        */
        R.modelName = "DataSourceDefinition";

    /**
     * @ngdoc object
     * @name apim.loopback.DataSourceDefinition.models
     * @header apim.loopback.DataSourceDefinition.models
     * @object
     * @description
     *
     * The object `DataSourceDefinition.models` groups methods
     * manipulating `ModelConfig` instances related to `DataSourceDefinition`.
     *
     * Call {@link apim.loopback.DataSourceDefinition#models DataSourceDefinition.models()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#models
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Queries models of DataSourceDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.models = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::get::DataSourceDefinition::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition.models#count
             * @methodOf apim.loopback.DataSourceDefinition.models
             *
             * @description
             *
             * Counts models of DataSourceDefinition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.models.count = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::count::DataSourceDefinition::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition.models#create
             * @methodOf apim.loopback.DataSourceDefinition.models
             *
             * @description
             *
             * Creates a new instance in models of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.models.create = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::create::DataSourceDefinition::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition.models#createMany
             * @methodOf apim.loopback.DataSourceDefinition.models
             *
             * @description
             *
             * Creates a new instance in models of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.models.createMany = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::createMany::DataSourceDefinition::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition.models#destroyAll
             * @methodOf apim.loopback.DataSourceDefinition.models
             *
             * @description
             *
             * Deletes all models of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.models.destroyAll = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::delete::DataSourceDefinition::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition.models#destroyById
             * @methodOf apim.loopback.DataSourceDefinition.models
             *
             * @description
             *
             * Delete a related item by id for models.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for models
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.models.destroyById = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::destroyById::DataSourceDefinition::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition.models#findById
             * @methodOf apim.loopback.DataSourceDefinition.models
             *
             * @description
             *
             * Find a related item by id for models.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for models
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.models.findById = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::findById::DataSourceDefinition::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition.models#updateById
             * @methodOf apim.loopback.DataSourceDefinition.models
             *
             * @description
             *
             * Update a related item by id for models.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `fk` – `{*}` - Foreign key for models
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ModelConfig` object.)
             * </em>
             */
        R.models.updateById = function() {
          var TargetResource = $injector.get("ModelConfig");
          var action = TargetResource["::updateById::DataSourceDefinition::models"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apim.loopback.DataSourceDefinition#facet
             * @methodOf apim.loopback.DataSourceDefinition
             *
             * @description
             *
             * Fetches belongsTo relation facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - DataSourceDefinition id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R.facet = function() {
          var TargetResource = $injector.get("Facet");
          var action = TargetResource["::get::DataSourceDefinition::facet"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apim.loopback.Middleware
 * @header apim.loopback.Middleware
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Middleware` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Middleware",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Middlewares/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Middleware.facet() instead.
            "prototype$__get__facet": {
              url: urlBase + "/Middlewares/:id/facet",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#create
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Middlewares",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#createMany
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Middlewares",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#upsert
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Middlewares",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#replaceOrCreate
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Middlewares/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#upsertWithWhere
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Middlewares/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#exists
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Middlewares/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#findById
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Middlewares/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#replaceById
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Middlewares/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#find
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Middlewares",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#findOne
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Middlewares/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#updateAll
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Middlewares/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#deleteById
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Middlewares/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#count
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Middlewares/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#prototype$updateAttributes
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Middleware id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Middlewares/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#createChangeStream
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Middlewares/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#patchOrCreate
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#updateOrCreate
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#patchOrCreateWithWhere
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#update
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#destroyById
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#removeById
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#prototype$patchAttributes
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Middleware id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Middleware` object.)
             * </em>
             */
        R["prototype$patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apim.loopback.Middleware#modelName
        * @propertyOf apim.loopback.Middleware
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Middleware`.
        */
        R.modelName = "Middleware";


            /**
             * @ngdoc method
             * @name apim.loopback.Middleware#facet
             * @methodOf apim.loopback.Middleware
             *
             * @description
             *
             * Fetches belongsTo relation facet.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Middleware id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Facet` object.)
             * </em>
             */
        R.facet = function() {
          var TargetResource = $injector.get("Facet");
          var action = TargetResource["::get::Middleware::facet"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name apim.loopback.LoopBackResourceProvider
   * @header apim.loopback.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name apim.loopback.LoopBackResourceProvider#setAuthHeader
     * @methodOf apim.loopback.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name apim.loopback.LoopBackResourceProvider#getAuthHeader
     * @methodOf apim.loopback.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name apim.loopback.LoopBackResourceProvider#setUrlBase
     * @methodOf apim.loopback.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name apim.loopback.LoopBackResourceProvider#getUrlBase
     * @methodOf apim.loopback.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);

